<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心雨</title>
  <subtitle>马美玲的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mcling.xyz/"/>
  <updated>2016-12-22T03:51:32.000Z</updated>
  <id>http://www.mcling.xyz/</id>
  
  <author>
    <name>马美玲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs part2</title>
    <link href="http://www.mcling.xyz/2016/12/12/node1.html"/>
    <id>http://www.mcling.xyz/2016/12/12/node1.html</id>
    <published>2016-12-12T01:12:15.000Z</published>
    <updated>2016-12-22T03:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul>
<li>一个文件就是一个模块<ul>
<li>文件是定义的变量,只能在这个文件夹中使用</li>
</ul>
</li>
<li>作用域</li>
<li>node 只需要自己一个人就可以当服务器软件<ul>
<li>node 中代码,可以接收前端浏览器发来的请求,并返回相应的数据</li>
</ul>
</li>
</ul>
<hr>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li>node 的核心模块</li>
<li>node 模块:<ul>
<li>核心模块(只要安装了 node 就会有的模块,已经被打包到了<code>node.exe</code>文件)</li>
<li>自定义模块</li>
<li>第三方的模块(包)</li>
</ul>
</li>
</ul>
<hr>
<h2 id="url-模块"><a href="#url-模块" class="headerlink" title="url 模块"></a>url 模块</h2><ul>
<li>用来操作 url <ul>
<li><code>url.parse(request.url,true)</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="fs-文件操作模块"><a href="#fs-文件操作模块" class="headerlink" title="fs 文件操作模块"></a>fs 文件操作模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="comment">// 读取文件:</span></div><div class="line"><span class="comment">// 参数1: 文件路径</span></div><div class="line"><span class="comment">// 参数2: 文件编码</span></div><div class="line"><span class="comment">// 返回值: 文件内容</span></div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'./index.html'</span>,<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 写入文件</span></div><div class="line"><span class="comment">// 第一个参数: 要写入的文件目录</span></div><div class="line"><span class="comment">// 第二个参数: 要写入的内容</span></div><div class="line"><span class="comment">// 这个方法执行时会覆盖之前的文件内容</span></div><div class="line">fs.writeFileSync(<span class="string">'./tmp.txt'</span>,<span class="string">'文本内容'</span>)</div><div class="line"><span class="comment">//追加文件</span></div><div class="line">fs.appendFileSync(<span class="string">'./xx.js'</span>,<span class="string">'文本内容\r\n'</span>)</div><div class="line"><span class="comment">//创建目录</span></div><div class="line"> <span class="comment">//判断目录是否存在,如果不存在,则创建</span></div><div class="line"> <span class="keyword">var</span> result=fs.existSync(<span class="string">'data'</span>)<span class="comment">//判断当前目录是否存在data目录</span></div><div class="line"> <span class="keyword">if</span>(!result)&#123;</div><div class="line">     <span class="built_in">console</span>.log(result)</div><div class="line">     <span class="comment">//创建目录</span></div><div class="line">     fs.mkdirSync(<span class="string">'data'</span>)<span class="comment">//在当前目录创建data目录</span></div><div class="line">    </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="dirname和-firename"><a href="#dirname和-firename" class="headerlink" title="__dirname和__firename"></a><code>__dirname</code>和<code>__firename</code></h2><ol>
<li>__dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串</li>
<li>__firename 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径</li>
</ol>
<hr>
<h2 id="form-表单"><a href="#form-表单" class="headerlink" title="form 表单"></a>form 表单</h2><h2 id="form-表单提交-使用get请求-会把请求参数添加到url中"><a href="#form-表单提交-使用get请求-会把请求参数添加到url中" class="headerlink" title="- form 表单提交,使用get请求,会把请求参数添加到url中"></a>- form 表单提交,使用<code>get</code>请求,会把请求参数添加到<code>url</code>中</h2><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul>
<li>在响应头里加上<code>Location:新地址</code>,并设置状态为302</li>
<li><code>res.setHeader(&#39;key&#39;,&#39;value&#39;)</code>//设置响应头</li>
<li><code>res.writeHead(状态码)</code>//设置状态码</li>
<li>浏览器接收到数据后会重新想新地址跳转</li>
</ul>
<hr>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul>
<li>node package manager</li>
<li>node 的包管理工具,管理的是第三方包</li>
<li><a href="https://www.npmjs.com/" target="_blank" rel="external">官网</a></li>
<li>也能管理前端的包</li>
</ul>
<hr>
<h2 id="离线文档阅读器"><a href="#离线文档阅读器" class="headerlink" title="离线文档阅读器"></a>离线文档阅读器</h2><ul>
<li><a href="https://zealdocs.org/" target="_blank" rel="external">windows 版本</a></li>
<li><a href="dash">mac 版本</a></li>
</ul>
<h2 id="es6-es2015"><a href="#es6-es2015" class="headerlink" title="es6/es2015"></a>es6/es2015</h2><ul>
<li>const<ul>
<li>const 申明的数据,在栈中不可变,但是如果是对象,则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可变</li>
</ul>
</li>
<li>let <ul>
<li>let 申明的变量,作用由大括号{}决定</li>
</ul>
</li>
</ul>
<h2 id="提交效率"><a href="#提交效率" class="headerlink" title="提交效率"></a>提交效率</h2><ul>
<li>组合键:<code>win+E</code>,打开资源管理器</li>
<li>组合键:<code>win+D</code>,快速切换到桌面</li>
<li>组合键:<code>ctrl+shift+esc</code> 快速打开任务管理器</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;node&quot;&gt;&lt;a href=&quot;#node&quot; class=&quot;headerlink&quot; title=&quot;node&quot;&gt;&lt;/a&gt;node&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个文件就是一个模块&lt;ul&gt;
&lt;li&gt;文件是定义的变量,只能在这个文件夹中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://www.mcling.xyz/categories/nodeJs/"/>
    
    
      <category term="node" scheme="http://www.mcling.xyz/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>nodejs part1</title>
    <link href="http://www.mcling.xyz/2016/12/10/node.html"/>
    <id>http://www.mcling.xyz/2016/12/10/node.html</id>
    <published>2016-12-10T02:28:15.000Z</published>
    <updated>2016-12-12T01:11:27.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul>
<li>[官网]<code>(http://nodejs.org/en/)</code></li>
</ul>
<hr>
<p>###　node 是什么?</p>
<ul>
<li><code>node</code> 中也包含 <code>js</code> 解析引擎( <code>node</code> 现在用的就是 V8 引擎!速度非常快)</li>
<li><code>php</code> /后端使用的语言(后端写的代码运行在服务器!)<ul>
<li>区分前端和后端(就看最终代码在哪里执行,在浏览器中执行就是前端,在服务器执行就是后端)</li>
</ul>
</li>
<li><code>node</code> [<em>其实是一个包含的<code>js</code>解析引擎(V8)的软件!</em>] (可以在后端使用)<ul>
<li>有了<code>js</code>解析引擎就会解析<code>js</code>代码</li>
</ul>
</li>
<li>浏览器的js<ul>
<li>可以通过<code>js</code>操作<code>html</code></li>
<li><code>DOM</code>(和操作<code>html</code>有关),<code>BOM</code>(和浏览器有关),<code>ECMA</code>(就是<code>js</code>语法规范)</li>
</ul>
</li>
<li><code>node</code> 中的<code>js</code><ul>
<li>没有<code>DOM</code>,没有<code>BOM</code>,有<code>ECMA</code></li>
<li><code>window</code>(也就是没有<code>window</code>对象)</li>
</ul>
</li>
</ul>
<h3 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h3><h3 id="node-快速开始"><a href="#node-快速开始" class="headerlink" title="node 快速开始"></a>node 快速开始</h3><h3 id="node-中引入模块-和暴露数据"><a href="#node-中引入模块-和暴露数据" class="headerlink" title="node 中引入模块,和暴露数据"></a>node 中引入模块,和暴露数据</h3><ul>
<li>引入模块,使用<code>node</code>中提供<code>require(&#39;./jack.js&#39;)</code>方法</li>
<li>暴露数据使用的是<code>module.exports={xxx}</code>或者<code>exports.xxx=yyy</code></li>
</ul>
<h3 id="node-中不仅包含js解析引擎-还包含服务器软件的功能"><a href="#node-中不仅包含js解析引擎-还包含服务器软件的功能" class="headerlink" title="node 中不仅包含js解析引擎,还包含服务器软件的功能"></a>node 中不仅包含js解析引擎,还包含服务器软件的功能</h3><ul>
<li>电脑上只要安装了<code>node</code>,不需要其他的软件配置,就能够开启 <code>http</code>服务</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li><code>file</code>协议,默认,不能使用ajax请求</li>
</ul>
<ul>
<li>服务器就是一台电脑(这个电脑是有独立ip)</li>
<li>我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上,很少这么用)</li>
<li>操作系统都可能是一样的</li>
<li>服务器能运行的软件,我们电脑也能运行</li>
</ul>
<hr>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul>
<li>系统底层还是命令!</li>
<li>window 系统刚出来是没有界面的</li>
<li>在cmd中敲命令,会默认到当前命令行对应的目录找文件执行</li>
</ul>
<hr>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li>我们在<code>cmd</code>窗口中敲一个命令,本质上执行了一个程序(软件)</li>
<li>默认按下回车时,回到当前命令行所在的目录寻找文件,如果找到立即执行</li>
<li>如果找不到,就会到环境变量中的<code>PATH</code>中指定的目录寻找</li>
</ul>
<p>例: 我们把<code>node</code>的默认安装目录: C:\Program Files\nodejs配置<code>PATH</code>上,那么我们在<code>cmd</code>中敲命令时,如果当前目录找不到,就会到<code>C:\Program Files\nodejs</code>目录寻找相应的文件执行!</p>
<h2 id="服务器就是一台电脑"><a href="#服务器就是一台电脑" class="headerlink" title="服务器就是一台电脑"></a>服务器就是一台电脑</h2><ul>
<li>只是性能一般比普通电脑高</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;node&quot;&gt;&lt;a href=&quot;#node&quot; class=&quot;headerlink&quot; title=&quot;node&quot;&gt;&lt;/a&gt;node&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[官网]&lt;code&gt;(http://nodejs.org/en/)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://www.mcling.xyz/categories/nodeJs/"/>
    
    
      <category term="node" scheme="http://www.mcling.xyz/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>流行框架 part1</title>
    <link href="http://www.mcling.xyz/2016/12/09/kuangjia.html"/>
    <id>http://www.mcling.xyz/2016/12/09/kuangjia.html</id>
    <published>2016-12-09T01:38:00.000Z</published>
    <updated>2016-12-22T03:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><blockquote>
<p>专注于写作,提高生产力</p>
</blockquote>
<h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><blockquote>
<p>Markdown 的目标是实现 [ 易读易写 ]</p>
</blockquote>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>轻量级标记语言( html xml ),2004 年被 <code>John Gruber</code> 创造,<br>它允许人们’使用易读易写的纯文本格式编写文档’, Markdown 最重要的设计就是可读性,<br>Markdown 可以选择性的转换为 HTML 文档格式,很多网站目前都使用了 Markdown ,例如 Github 简书等大型社区</p>
<hr>
<h2 id="Markdown-的优点"><a href="#Markdown-的优点" class="headerlink" title="Markdown 的优点"></a>Markdown 的优点</h2><ul>
<li>纯文本,所以兼容性极强,可以用所有文本编辑器打开</li>
<li>专注于文字写作而不是排版</li>
<li>格式转换方便,可以轻松转换为 <code>HTML</code> <code>PPT</code> 电子书等</li>
<li>Markdown 标记语法简单好记,可读性强</li>
</ul>
<hr>
<h2 id="实时预览编辑器"><a href="#实时预览编辑器" class="headerlink" title="实时预览编辑器"></a>实时预览编辑器</h2><p><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">月光博客 - 好用的Markdown编辑器一览</a></p>
<ul>
<li>dillinger</li>
<li>马克飞象</li>
<li>简书</li>
<li>MarkdownPad</li>
<li>Sublime Text<ul>
<li>配合 <code>Markdown Preview</code> 插件</li>
</ul>
</li>
<li>Webstorm<ul>
<li>配合插件</li>
</ul>
</li>
<li>gitbook</li>
</ul>
<hr>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中,有两个字符需要特殊处理: &lt; 和 &amp;<br>&lt; 符号用于起始标签, &amp; 符号用于标记 HTML 实体,<br>如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p>
<h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <br> 标签。</p>
<p>如果你确实想要依赖 Markdown 来插入 <br> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <br> ，但是简单地「每个换行都转换为 <br>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）,例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">This is an H1</div><div class="line">=============</div><div class="line"></div><div class="line">This is an H2</div><div class="line">-------------</div></pre></td></tr></table></figure></p>
<p>任何数量的 = 和 - 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶,例如:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 这是 H1</div><div class="line"></div><div class="line">## 这是 H2</div><div class="line"></div><div class="line">###### 这是 H6</div></pre></td></tr></table></figure></p>
<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的# 数量也不用和开头一样（行首的井字符数量决定标题的阶数）:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 这是 H1 #</div><div class="line"></div><div class="line">## 这是 H2 ##</div><div class="line"></div><div class="line">### 这是 H3 ######</div></pre></td></tr></table></figure></p>
<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</div><div class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</div><div class="line">&gt; </div><div class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</div><div class="line">&gt; id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure></p>
<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</div><div class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</div><div class="line"></div><div class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</div><div class="line">id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure></p>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; This is the first level of quoting.</div><div class="line">&gt;</div><div class="line">&gt; &gt; This is nested blockquote.</div><div class="line">&gt;</div><div class="line">&gt; Back to the first level.</div></pre></td></tr></table></figure></p>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; ## 这是一个标题。</div><div class="line">&gt; </div><div class="line">&gt; 1.   这是第一行列表项。</div><div class="line">&gt; 2.   这是第二行列表项。</div><div class="line">&gt; </div><div class="line">&gt; 给出一些例子代码：</div><div class="line">&gt; </div><div class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</div></pre></td></tr></table></figure></p>
<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>MarkDown 支持有序列表和无序列表</p>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*   Red</div><div class="line">*   Green</div><div class="line">*   Blue</div></pre></td></tr></table></figure></p>
<p>等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+   Red</div><div class="line">+   Green</div><div class="line">+   Blue</div></pre></td></tr></table></figure></p>
<p>也等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-   Red</div><div class="line">-   Green</div><div class="line">-   Blue</div></pre></td></tr></table></figure></p>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.  Bird</div><div class="line">2.  McHale</div><div class="line">3.  Parish</div></pre></td></tr></table></figure></p>
<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line">&lt;li&gt;Bird&lt;/li&gt;</div><div class="line">&lt;li&gt;McHale&lt;/li&gt;</div><div class="line">&lt;li&gt;Parish&lt;/li&gt;</div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure></p>
<p>如果你的列表标记写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.  Bird</div><div class="line">1.  McHale</div><div class="line">1.  Parish</div></pre></td></tr></table></figure></p>
<p>或甚至是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3. Bird</div><div class="line">1. McHale</div><div class="line">8. Parish</div></pre></td></tr></table></figure></p>
<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 </p><p> 标签包起来，举例来说：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*   Bird</div><div class="line">*   Magic</div><div class="line">//会被转换为</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;Bird&lt;/li&gt;</div><div class="line">&lt;li&gt;Magic&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">//但是这个:</div><div class="line">*   Bird</div><div class="line"></div><div class="line">*   Magic</div><div class="line">//会被转换为:</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</div><div class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</div><div class="line">    mi posuere lectus.</div><div class="line"></div><div class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</div><div class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</div><div class="line">    sit amet velit.</div><div class="line"></div><div class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure></p>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*   A list item with a blockquote:</div><div class="line"></div><div class="line">    &gt; This is a blockquote</div><div class="line">    &gt; inside a list item.</div></pre></td></tr></table></figure></p>
<p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*   一列表项包含一个列表区块：</div><div class="line"></div><div class="line">        &lt;代码写在这&gt;</div></pre></td></tr></table></figure></p>
<p>在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一个普通段落：</div><div class="line"></div><div class="line">    这是一个代码区块。</div></pre></td></tr></table></figure></p>
<p>Markdown 会转换成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;这是一个普通段落：&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;pre&gt;&lt;code&gt;这是一个代码区块。</div><div class="line">&lt;/code&gt;&lt;/pre&gt;</div></pre></td></tr></table></figure></p>
<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Here is an example of AppleScript:</div><div class="line"></div><div class="line">    tell application &quot;Foo&quot;</div><div class="line">        beep</div><div class="line">    end tell</div></pre></td></tr></table></figure></p>
<p>会被转换为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;</div><div class="line">    beep</div><div class="line">end tell</div><div class="line">&lt;/code&gt;&lt;/pre&gt;</div></pre></td></tr></table></figure></p>
<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。<br>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;footer&quot;&gt;</div><div class="line">     &amp;copy; 2004 Foo Corporation</div><div class="line"> &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>会被转换为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;</div><div class="line">    &amp;amp;copy; 2004 Foo Corporation</div><div class="line">&amp;lt;/div&amp;gt;</div><div class="line">&lt;/code&gt;&lt;/pre&gt;</div></pre></td></tr></table></figure></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">* * *</div><div class="line"></div><div class="line">***</div><div class="line"></div><div class="line">*****</div><div class="line"></div><div class="line">- - -</div><div class="line"></div><div class="line">---------------------------------------</div></pre></td></tr></table></figure></p>
<h3 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</div><div class="line"></div><div class="line">[This link](http://example.net/) has no title attribute.</div></pre></td></tr></table></figure></p>
<p>会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</div><div class="line">an example&lt;/a&gt; inline link.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</div><div class="line">title attribute.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>如果你是要链接到同样主机的资源，你可以使用相对路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">See my [About](/about/) page for details.</div></pre></td></tr></table></figure></p>
<p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is [an example][id] reference-style link.</div></pre></td></tr></table></figure></p>
<p>你也可以选择性地在两个方括号中间加上一个空格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is [an example] [id] reference-style link.</div></pre></td></tr></table></figure></p>
<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id]: http://example.com/  &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure></p>
<p>链接内容定义的形式为：</p>
<ol>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 </li>
</ol>
<p>下面这三种链接的定义都是相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</div><div class="line">[foo]: http://example.com/  &apos;Optional Title Here&apos;</div><div class="line">[foo]: http://example.com/  (Optional Title Here)</div></pre></td></tr></table></figure></p>
<p>链接网址也可以用方括号包起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure></p>
<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[id]: http://example.com/longish/path/to/resource/here</div><div class="line">&quot;Optional Title Here&quot;</div></pre></td></tr></table></figure></p>
<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。<br>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[link text][a]</div><div class="line">[link text][A]</div></pre></td></tr></table></figure></p>
<p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Google][]</div></pre></td></tr></table></figure></p>
<p>然后定义链接内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Google]: http://google.com/</div></pre></td></tr></table></figure></p>
<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Visit [Daring Fireball][] for more information.</div></pre></td></tr></table></figure></p>
<p>然后接着定义链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Daring Fireball]: http://daringfireball.net/</div></pre></td></tr></table></figure></p>
<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code>或<code>_</code>包围的字词会被转成用<code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code>或<code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*single asterisks*</div><div class="line"></div><div class="line">_single underscores_</div><div class="line"></div><div class="line">**double asterisks**</div><div class="line"></div><div class="line">__double underscores__</div></pre></td></tr></table></figure></p>
<p>会转成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;em&gt;single asterisks&lt;/em&gt;</div><div class="line"></div><div class="line">&lt;em&gt;single underscores&lt;/em&gt;</div><div class="line"></div><div class="line">&lt;strong&gt;double asterisks&lt;/strong&gt;</div><div class="line"></div><div class="line">&lt;strong&gt;double underscores&lt;/strong&gt;</div></pre></td></tr></table></figure></p>
<p>强调也可以直接插在文字中间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">un*frigging*believable</div></pre></td></tr></table></figure></p>
<p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\*this text is surrounded by literal asterisks\*</div></pre></td></tr></table></figure></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the `printf()` function.</div></pre></td></tr></table></figure></p>
<p>会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">``There is a literal backtick (`) here.``</div></pre></td></tr></table></figure></p>
<p>这段语法会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A single backtick in a code span: `` ` ``</div><div class="line"></div><div class="line">A backtick-delimited string in a code span: `` `foo` ``</div></pre></td></tr></table></figure></p>
<p>会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Please don&apos;t use any `&lt;blink&gt;` tags.</div></pre></td></tr></table></figure></p>
<p>转为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>你也可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</div></pre></td></tr></table></figure></p>
<p>会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded</div><div class="line">equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>
<p>行内式的图片语法:</p>
<ol>
<li>一个惊叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg)</div><div class="line"></div><div class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考式的图片语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text][id]</div></pre></td></tr></table></figure></p>
<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id]: url/to/image  &quot;Optional title attribute&quot;</div></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;http://example.com/&gt;</div></pre></td></tr></table></figure></p>
<p>Markdown 会转为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h4><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\*literal asterisks\*</div></pre></td></tr></table></figure></em></p>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\   反斜线</div><div class="line">`   反引号</div><div class="line">*   星号</div><div class="line">_   底线</div><div class="line">&#123;&#125;  花括号</div><div class="line">[]  方括号</div><div class="line">()  括弧</div><div class="line">#   井字号</div><div class="line">+   加号</div><div class="line">-   减号</div><div class="line">.   英文句点</div><div class="line">!   惊叹号</div></pre></td></tr></table></figure></p>
<h3 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h3><ul>
<li>学习笔记</li>
<li>演讲稿</li>
<li>写书（侧重于技术相关的内容非常适合）</li>
<li>个人笔记</li>
<li>文章博客</li>
<li>教学讲义</li>
<li>说明文档</li>
<li>电子邮件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MarkDown&quot;&gt;&lt;a href=&quot;#MarkDown&quot; class=&quot;headerlink&quot; title=&quot;MarkDown&quot;&gt;&lt;/a&gt;MarkDown&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;专注于写作,提高生产力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
    
    </summary>
    
      <category term="流行框架" scheme="http://www.mcling.xyz/categories/%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="tools" scheme="http://www.mcling.xyz/tags/tools/"/>
    
      <category term="markdown" scheme="http://www.mcling.xyz/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part7</title>
    <link href="http://www.mcling.xyz/2016/12/07/js-ajax.html"/>
    <id>http://www.mcling.xyz/2016/12/07/js-ajax.html</id>
    <published>2016-12-07T01:15:21.000Z</published>
    <updated>2016-12-22T03:44:50.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax请求流程"><a href="#Ajax请求流程" class="headerlink" title="Ajax请求流程"></a>Ajax请求流程</h2><ol>
<li><p>创建一个请求对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.XMLHTTPRequest? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHTTPRequest(): <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>格式化数据</p>
<ul>
<li>将格式化后的数据,参数与值都需要重新编码<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">farmatData</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ret=[];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> data)&#123;</div><div class="line">        ret.push(<span class="built_in">window</span>.encodeURIComponent(k)+<span class="string">'='</span>+<span class="built_in">window</span>.encodeURIComponent(data[k]));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果不想从服务器缓存中读取数据</span></div><div class="line">    ret.push((<span class="string">'_='</span>+<span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>,<span class="string">' '</span>));</div><div class="line">    <span class="keyword">return</span> ret.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>与服务器建立连接</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(type===<span class="string">'get'</span>)</div><div class="line">xhr.open(<span class="string">'GET|POST'</span>,url+<span class="string">'?'</span>+fdata, <span class="keyword">async</span>=<span class="literal">true</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>监听请求状态</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState===<span class="number">4</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp;xhr.status&lt;<span class="number">300</span>||xhr.status===<span class="number">304</span>)&#123;</div><div class="line">            <span class="comment">//success代码块</span></div><div class="line">            <span class="comment">//xhr.responseText</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//fail  代码块</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>发送请求 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send(string);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Jsonp请求流程"><a href="#Jsonp请求流程" class="headerlink" title="Jsonp请求流程"></a>Jsonp请求流程</h2><ol>
<li>跨域请求只能发送<code>GET</code>请求,一种不安全的请求方式</li>
<li>原理: 由于<code>dom</code>元素的<code>src</code>属性具有跨域功能.在实现跨域请求时,为了方便就使用<code>script</code>标签来做</li>
<li>流程<ul>
<li>创建请求对象,就是创建一个<code>script</code>标签</li>
<li>将上述创建的<code>script</code>标签添加到页面的<code>head</code>标签下</li>
<li>格式化数据</li>
<li>创建全局回调函数</li>
<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败,否则,请求成功</li>
<li>发送请求:指定<code>script</code>标签的<code>src</code>属性</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax请求流程&quot;&gt;&lt;a href=&quot;#Ajax请求流程&quot; class=&quot;headerlink&quot; title=&quot;Ajax请求流程&quot;&gt;&lt;/a&gt;Ajax请求流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个请求对象&lt;/p&gt;
&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="ajax模块" scheme="http://www.mcling.xyz/tags/ajax%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part6</title>
    <link href="http://www.mcling.xyz/2016/12/06/js3.html"/>
    <id>http://www.mcling.xyz/2016/12/06/js3.html</id>
    <published>2016-12-06T01:15:14.000Z</published>
    <updated>2016-12-22T03:43:45.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画原理-根据人眼睛具有0-1秒的视觉残留-只有在一秒钟切换至少24个画面就会产生动画"><a href="#动画原理-根据人眼睛具有0-1秒的视觉残留-只有在一秒钟切换至少24个画面就会产生动画" class="headerlink" title="动画原理: 根据人眼睛具有0.1秒的视觉残留,只有在一秒钟切换至少24个画面就会产生动画"></a>动画原理: 根据人眼睛具有0.1秒的视觉残留,只有在一秒钟切换至少24个画面就会产生动画</h2><h2 id="动画的基本结构"><a href="#动画的基本结构" class="headerlink" title="动画的基本结构"></a>动画的基本结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">window</span>.setInterval(render,time);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="匀速直线动画"><a href="#匀速直线动画" class="headerlink" title="匀速直线动画"></a>匀速直线动画</h2><ol>
<li>固定时间</li>
<li>固定距离</li>
<li>如何判定动画结束的时机?<ul>
<li>使用时间来判断是否结束动画</li>
<li>如果动画时间到达了指定的时间,那么就结束动画,并且让动画元素到达终点</li>
</ul>
</li>
<li>实现思路<ul>
<li>定义动画函数,animate函数,当调用animate函数时,即动画开始的时间</li>
<li>定义render函数,用来给动画元素设置属性值<ul>
<li>计算当前动画元素所在的位置,然后累加到其对应属性值上</li>
<li>首先计算动画的时间间隔</li>
<li>如果时间间隔大于或等于指定的总时间,那么就停止动画并设置动画元素到达终点</li>
<li>否则,根据速度,动画时间间隔计算出位移,在将其与起始位置累加后赋值给elem</li>
</ul>
</li>
<li>定义定时器,开始动画</li>
</ul>
</li>
</ol>
<h2 id="匀减速直线动画"><a href="#匀减速直线动画" class="headerlink" title="匀减速直线动画"></a>匀减速直线动画</h2><ol>
<li>物理公式<ul>
<li>a: 加速度</li>
<li>t: 时间间隔</li>
<li>v0: 初始速度</li>
<li>vt: 末速度</li>
<li>S: 位移</li>
<li>正方向: S = v0 <em> t + a </em> t * t / 2;</li>
</ul>
</li>
<li>S ==&gt; target-location<br>t ==&gt; duration<br>v0 = 0</li>
<li><p>正方向 a = 2 <em> ( S - v0 </em> t ) / ( t <em> t )<br> ==&gt; = 2 </em> S / ( t <em> t )<br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration)<br>vt = 2 </em>( target -location) / duration</p>
</li>
<li><p>time时间间隔内的匀减速位移 tween = v0 <em> time -a </em> time <em> time / 2<br>==&gt; tween = 2 </em> distance <em> time / duration - distance </em> time <em> time / ( duration </em> duration )</p>
</li>
</ol>
<h2 id="封装动画库"><a href="#封装动画库" class="headerlink" title="封装动画库"></a>封装动画库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">                   x: null</div><div class="line">                   t: 时间间隔</div><div class="line">                   b: 起始位置</div><div class="line">                   c: 终止位置</div><div class="line">                   d: 总时间</div><div class="line"></div><div class="line">                  */</div><div class="line">                 <span class="keyword">var</span> easing = &#123;		</div><div class="line">		<span class="attr">linear</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> (c - b) * t / d;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">minusspeed</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//</span></div><div class="line">		easeInQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</div><div class="line">			<span class="keyword">return</span> -c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * t * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * ((t = t / d - <span class="number">1</span>) * t * t * t - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t + b;</div><div class="line">			<span class="keyword">return</span> -c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t - <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t * t + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t * t + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * <span class="built_in">Math</span>.cos(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + c + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * <span class="built_in">Math</span>.sin(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI * t / d) - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> (t == <span class="number">0</span>) ? b : c * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t / d - <span class="number">1</span>)) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> (t == d) ? b + c : c * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t / d) + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> (t == d) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t - <span class="number">1</span>)) + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * --t) + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t /= d) * t) - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * <span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t = t / d - <span class="number">1</span>) * t) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - t * t) - <span class="number">1</span>) + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t -= <span class="number">2</span>) * t) + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">			<span class="keyword">var</span> a = c;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">			<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">				a = c;</div><div class="line">				<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">			<span class="keyword">return</span> -(a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">			<span class="keyword">var</span> a = c;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">			<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">				a = c;</div><div class="line">				<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">			<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">			<span class="keyword">var</span> a = c;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) == <span class="number">2</span>) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> (!p) p = d * (<span class="number">.3</span> * <span class="number">1.5</span>);</div><div class="line">			<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">				a = c;</div><div class="line">				<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">			<span class="keyword">if</span> (t &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-.5</span> * (a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">			<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) * <span class="number">.5</span> + c + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * ((s + <span class="number">1</span>) * t - s) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * ((s + <span class="number">1</span>) * t + s) + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * (t * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t - s)) + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t + s) + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d) &lt; (<span class="number">1</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * t * t) + b;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">1.5</span> / <span class="number">2.75</span>)) * t + <span class="number">.75</span>) + b;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.25</span> / <span class="number">2.75</span>)) * t + <span class="number">.9375</span>) + b;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.625</span> / <span class="number">2.75</span>)) * t + <span class="number">.984375</span>) + b;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<h2 id="多属性动画的实现"><a href="#多属性动画的实现" class="headerlink" title="多属性动画的实现"></a>多属性动画的实现</h2><ol>
<li><p>获取所有动画属性的起始值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">      <span class="keyword">var</span> kv=&#123;</div><div class="line">	<span class="string">'left'</span>:<span class="string">'offsetLeft'</span>,</div><div class="line">	<span class="string">'top'</span>:<span class="string">'offsetTop'</span>,</div><div class="line">	<span class="string">'width'</span>:<span class="string">'offsetWidth'</span>,</div><div class="line">	<span class="string">'height'</span>:<span class="string">'offsetHeight'</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//获取起始位置</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params">elem,target</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> target)&#123;</div><div class="line">		obj[k]=elem[kv[k]];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取动画总距离</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">location,target</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> target)&#123;</div><div class="line">		obj[k]=<span class="built_in">parseFloat</span>(target[k])-location[k];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取单位时间间隔的位移</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTween</span>(<span class="params">time,location,target,duration,easingName</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> target)&#123;</div><div class="line">		obj[k]=easing[easingName](<span class="literal">null</span>,time,location[k],target[k],duration);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyles</span>(<span class="params">elem,location,tween</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> k;</div><div class="line">	<span class="keyword">for</span>(k <span class="keyword">in</span> location)&#123;</div><div class="line">            elem.style[k]=location[k]+tween[k]+<span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>animate动画</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate=<span class="function"><span class="keyword">function</span>(<span class="params">elem,target,duration,easingName</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> timer,<span class="comment">//定时器id</span></div><div class="line">		tween,<span class="comment">//单位时间间隔的位移</span></div><div class="line">		location,<span class="comment">//起始位置</span></div><div class="line">		distance,<span class="comment">//动画总距离</span></div><div class="line">		startTime,<span class="comment">//动画开始时间</span></div><div class="line">		currentTime,<span class="comment">//动画当前时间</span></div><div class="line">		time;</div><div class="line"></div><div class="line">		location=getLocation(elem,target);</div><div class="line">		distance=getDistance(location,target);</div><div class="line">		startTime=+<span class="keyword">new</span> <span class="built_in">Date</span>;<span class="comment">//转换毫秒值</span></div><div class="line"></div><div class="line">		<span class="comment">//计算动画当前位移,并确定动画元素的位置</span></div><div class="line">		<span class="keyword">var</span> render=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			currentTime=+<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">			time=currentTime-startTime;</div><div class="line">			<span class="comment">//如果当前动画时间间隔大于或等于指定的总时间</span></div><div class="line">			<span class="comment">//停止动画,并设置动画元素到达终点</span></div><div class="line">			<span class="keyword">if</span>(time&gt;=duration)&#123;</div><div class="line">				<span class="comment">//1.设置动画元素到达终点</span></div><div class="line">				tween=distance;</div><div class="line">				<span class="comment">//2. 清除定时器</span></div><div class="line">				<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//根据匀减速运动公式求time时间间隔内的位移</span></div><div class="line">				<span class="comment">//指定动画元素的位置</span></div><div class="line">				<span class="comment">//注意:加上起始位置</span></div><div class="line">				tween=getTween(time,location,target,duration,easingName);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//设置动画属性值</span></div><div class="line">			setStyles(elem,location,tween);</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">//启动定时器 开始动画</span></div><div class="line">		timer=<span class="built_in">window</span>.setInterval(render,<span class="number">1000</span>/<span class="number">60</span>);</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动画原理-根据人眼睛具有0-1秒的视觉残留-只有在一秒钟切换至少24个画面就会产生动画&quot;&gt;&lt;a href=&quot;#动画原理-根据人眼睛具有0-1秒的视觉残留-只有在一秒钟切换至少24个画面就会产生动画&quot; class=&quot;headerlink&quot; title=&quot;动画原理: 
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="动画" scheme="http://www.mcling.xyz/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part5</title>
    <link href="http://www.mcling.xyz/2016/12/05/js-jQuery.html"/>
    <id>http://www.mcling.xyz/2016/12/05/js-jQuery.html</id>
    <published>2016-12-05T01:09:24.000Z</published>
    <updated>2016-12-22T03:43:51.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="appendTo方法"><a href="#appendTo方法" class="headerlink" title="appendTo方法"></a><code>appendTo</code>方法</h2><ol>
<li>功能: 将结果集中的元素 追加到指定的<code>dom</code>元素上</li>
<li>实现思路<ul>
<li>定义<code>appendTo</code>方法,声明一个形参<code>target</code>,形参表示追加的目标<code>dom</code>元素<pre><code>* 选择器
* `dom`元素
* `dom`数组
</code></pre></li>
<li>为了操作方便,将<code>target</code>类型统一为<code>itcast</code>对象</li>
<li>遍历<code>this</code>上的每一个<code>dom</code>元素,在遍历<code>target</code>上的每一个<code>dom</code>元素</li>
<li>将<code>this</code>上的<code>dom</code>元素追加到<code>target</code>上</li>
<li>注意:<br>在追加节点时,如果遍历的是第一个目标<code>dom</code>元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点存储到ret内</li>
<li>将<code>ret</code>数组转换成<code>itcast</code>对象,作为<code>appendTo</code>方法的返回值<br>  *如果不这样做的话,就会在添加样式时</li>
</ul>
</li>
</ol>
<h2 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a><code>append</code>方法</h2><ol>
<li>语法:<code>&lt;itcast对象&gt;.append(source);</code></li>
<li>功能: 将<code>source</code>上的所有<code>dom</code>元素追加到<code>itcast</code>对象上</li>
<li>实现思路<ul>
<li>统一<code>source</code>类型,为<code>itcast</code>对象.</li>
<li><code>source.appendTo(this)</code></li>
<li><code>return this;</code></li>
</ul>
</li>
</ol>
<h2 id="prependTo方法"><a href="#prependTo方法" class="headerlink" title="prependTo方法"></a><code>prependTo</code>方法</h2><ol>
<li>语法:<code>&lt;itcast对象&gt;.prependTo(target);</code></li>
<li>功能:将<code>itcast</code>对象上的每一个<code>dom</code>元素追加到<code>target</code>最前边<code>insertBefore</code></li>
<li>实现思路<ul>
<li>统一<code>target</code>类型为<code>itcast</code>对象</li>
<li>定义<code>node</code>变量,临时存储被追加的节点,定义<code>ret</code>数组,存储所有被追加的节点</li>
<li>遍历<code>target</code>上的每一个<code>dom</code>元素,在遍历<code>this</code>上的每一个<code>dom</code>元素</li>
<li>定义变量<code>firstChild</code>,临时存储当前<code>dom</code>元素的第一个子节点,在遍历<code>this</code>上的每一个<code>dom</code>元素</li>
<li>判断当前遍历的<code>dom</code>是否为<code>target</code>上的每一个<code>dom</code>元素</li>
<li>如果为真,此时不需要克隆节点</li>
<li>否则,要深克隆节点</li>
<li>将上述得到的节点,<code>push</code>到<code>ret</code>内</li>
<li>调用<code>insertBefore</code>方法 追加节点,此时第一个参数为追加新的节点,第二个参数为<code>firstChild</code>,在<code>firstChild</code>之前追加新节点</li>
<li>两层循环结束,操作完成</li>
<li>将<code>ret</code>转换成<code>itcast</code>对象,作为<code>prependTo</code>方法的返回值,实现链式编程</li>
</ul>
</li>
</ol>
<h2 id="prepend方法"><a href="#prepend方法" class="headerlink" title="prepend方法"></a><code>prepend</code>方法</h2><ol>
<li>语法:<code>&lt;itcast对象&gt;.prepend(source);</code></li>
<li>功能: 把<code>source</code>上所有的<code>dom</code>元素,添加到<code>this</code>上的最前边</li>
<li>实现思路:<ul>
<li>统一<code>source</code>类型,为<code>itcast</code>对象</li>
<li>通过<code>source</code>调用<code>prependTo</code>方法,将<code>source</code>上所有<code>dom</code>添加到<code>this</code>上的最前边</li>
<li><code>return this</code>实现链式编程</li>
</ul>
</li>
</ol>
<h2 id="next方法"><a href="#next方法" class="headerlink" title="next方法"></a><code>next</code>方法</h2><ol>
<li>功能: 获取<code>itcast</code>对象上所有<code>dom</code>元素的下一个兄弟元素<code>(nextSibling)</code></li>
<li>语法:<code>&lt;itcast对象&gt;.next();</code>返回值类型:<code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义<code>ret</code>数组,存储所有<code>dom</code>的下一个兄弟元素</li>
<li>遍历<code>this</code>上的所有<code>dom</code>元素</li>
<li>遍历当前<code>dom</code>元素下面的所有兄弟,如果类型为元素,将此元素存储<code>ret</code>内,结束循环</li>
<li>两层循环结束,将<code>ret</code>转换成<code>itcast</code>对象,作为<code>next</code>方法的返回值</li>
</ul>
</li>
</ol>
<h2 id="nextAll方法"><a href="#nextAll方法" class="headerlink" title="nextAll方法"></a><code>nextAll</code>方法</h2><ol>
<li>功能: 获取<code>itcast</code>对象上所有<code>dom</code>元素的后面的所有兄弟元素<code>(nextSibling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code>返回值类型:<code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义<code>ret数组</code>,存储所有<code>dom</code>下面的所有兄弟元素</li>
<li>遍历<code>this</code>上的所有<code>dom元素</code></li>
<li>遍历当前<code>dom</code>元素下面的所有兄弟,如果类型为元素,将此元素存储<code>ret</code>内,结束循环</li>
<li>两层循环结束,将<code>ret</code>转换成<code>itcast对象</code>,作为<code>nextAll</code>方法的返回值</li>
</ul>
</li>
</ol>
<h2 id="before方法"><a href="#before方法" class="headerlink" title="before方法"></a><code>before</code>方法</h2><ol>
<li>功能:</li>
<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>
<li>实现思路<ul>
<li>统一<code>source</code>类型,为<code>itcast</code>对象</li>
<li>遍历<code>this</code>上的每一个<code>dom</code>元素</li>
<li>遍历<code>source</code>上的每一个<code>dom</code>元素</li>
<li>判断当前遍历<code>this</code>的<code>dom</code>元素的索引是否为0</li>
<li>如果为0,不需要拷贝节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历<code>this</code>的<code>dom</code>元素的父节点,调用<code>insertBefore</code>方法在其前面添加上面得到的新节点</li>
<li>两层循环结束,操作完成</li>
<li><code>return this</code>实现链式编程</li>
</ul>
</li>
</ol>
<h2 id="after方法"><a href="#after方法" class="headerlink" title="after方法"></a><code>after</code>方法</h2><ol>
<li>功能:</li>
<li>语法:<code>&lt;itcast对象&gt;.after(source)</code></li>
<li>实现思路<ul>
<li>定义<code>nextSibling</code>变量,存储<code>dom</code>元素的下一个兄弟节点</li>
<li>统一<code>source</code>类型为<code>itcast</code>对象</li>
<li>遍历<code>this</code>上的每一个<code>dom</code>元素</li>
<li>在遍历<code>source</code>上的每一个<code>dom</code>元素</li>
<li>判断当前遍历<code>this</code>的<code>dom</code>元素的索引是否为0</li>
<li>如果为0,不需要拷节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历<code>this</code>的<code>dom</code>元素的父节点,调用<code>insertBefore</code>方法在<code>nextSibling</code>前面添加上面得到的新节点</li>
<li>两层循环完毕,操作完成</li>
<li><code>return this</code>实现链式编程</li>
</ul>
</li>
</ol>
<h2 id="unique方法"><a href="#unique方法" class="headerlink" title="unique方法"></a><code>unique</code>方法</h2><ol>
<li>功能: 实现数组去重</li>
<li>语法: <code>var newRet=itcast.unique(arr);</code></li>
<li>实现思路: <ul>
<li>定义空数组对象<code>ret</code>存储去重后的元素</li>
<li>遍历原数组,如果当前遍历到的元素在<code>ret</code>中不存在,就添加到<code>ret</code>内</li>
<li>循环结束,<code>ret</code>存储的就是去重后的元素</li>
<li>返回<code>ret</code></li>
</ul>
</li>
<li>兼容 <code>IE8 indexOf</code>方法<ul>
<li>首先判断当前浏览器是否支持<code>indexOf</code>方法</li>
<li>如果不支持,就给数组对象的原型添加<code>indexOf</code>方法</li>
<li>遍历<code>this</code>上的所有元素</li>
<li>如果遍历到的当前元素和指定参数值相同,就直接返回其索引值.结束循环</li>
<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值,就返回-1</li>
</ul>
</li>
</ol>
<h2 id="prev方法-previousSibling"><a href="#prev方法-previousSibling" class="headerlink" title="prev方法  previousSibling"></a><code>prev</code>方法  <code>previousSibling</code></h2><ol>
<li>功能: 获取<code>itcast</code>对象上所有<code>dom</code>元素的前一个兄弟元素<code>(previousSibling)</code></li>
<li>语法:<code>&lt;itcast对象&gt;.prev();</code>返回值类型:<code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义<code>ret</code>数组,存储所有<code>dom</code>的前一个兄弟元素</li>
<li>遍历<code>this</code>上的所有<code>dom</code>元素</li>
<li>遍历当前<code>dom</code>元素之前的所有兄弟,如果类型为元素,将此元素存储<code>ret</code>内,结束循环</li>
<li>两层循环结束,将<code>ret</code>转换成<code>itcast</code>对象,作为<code>next</code>方法的返回值</li>
</ul>
</li>
</ol>
<h2 id="prevAll方法"><a href="#prevAll方法" class="headerlink" title="prevAll方法"></a><code>prevAll</code>方法</h2><ol>
<li>功能: 获取<code>itcast</code>对象上所有<code>dom</code>元素的之前的所有兄弟元素<code>(nextSibling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code>返回值类型:<code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义<code>ret数组</code>,存储所有<code>dom</code>之前的所有兄弟元素</li>
<li>遍历<code>this</code>上的所有<code>dom元素</code></li>
<li>遍历当前<code>dom</code>元素之前的所有兄弟,如果类型为元素,将此元素存储<code>ret</code>内,结束循环</li>
<li>两层循环结束,将<code>ret</code>转换成<code>itcast对象</code>,作为<code>nextAll</code>方法的返回值</li>
</ul>
</li>
</ol>
<h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a><code>remove</code>方法</h2><ol>
<li>功能:将筛选出来的所有的<code>dom</code>元素 删除掉</li>
<li>实现思路:<ul>
<li>遍历<code>this</code>上的所有<code>dom</code>元素</li>
<li>获取当前<code>dom</code>元素的父节点,调用<code>removeChild</code>方法删除自己</li>
<li>循环结束,返回<code>this</code></li>
</ul>
</li>
</ol>
<h2 id="empty方法"><a href="#empty方法" class="headerlink" title="empty方法"></a><code>empty</code>方法</h2><ol>
<li>功能:将筛选出来的所有`dom元素,清空后代节点</li>
<li>实现思路<ul>
<li>遍历<code>this</code>上的所有<code>dom</code>元素</li>
<li>直接给当前<code>dom</code>元素的<code>innerHTML</code>属性赋值为空字符串</li>
<li>循环结束,返回<code>this</code>,实现链式编程</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;appendTo方法&quot;&gt;&lt;a href=&quot;#appendTo方法&quot; class=&quot;headerlink&quot; title=&quot;appendTo方法&quot;&gt;&lt;/a&gt;&lt;code&gt;appendTo&lt;/code&gt;方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;功能: 将结果集中的元素 追加到指定的
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="jquery" scheme="http://www.mcling.xyz/tags/jquery/"/>
    
      <category term="dom模块" scheme="http://www.mcling.xyz/tags/dom%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part5</title>
    <link href="http://www.mcling.xyz/2016/12/04/js2.html"/>
    <id>http://www.mcling.xyz/2016/12/04/js2.html</id>
    <published>2016-12-04T02:56:49.000Z</published>
    <updated>2016-12-22T03:42:32.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ol>
<li><p><code>DOMO</code>方式</p>
<ul>
<li>通过<code>dom</code>元素的<code>(on + 事件名称)</code>属性来绑定事件,并且赋值为一个字符串</li>
<li>上述字符串为执行该事件的代码块(逻辑)</li>
<li>缺点:可读性以及可维护性不好.</li>
</ul>
</li>
<li><p><code>DOMO</code>方式的加强版</p>
<ul>
<li>通过<code>dom</code>元素的<code>(on + 事件名称)</code>属性来绑定事件,并且赋值为事件处理函数</li>
<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决<code>js</code>代码和<code>html</code>的耦合度关系</li>
</ul>
</li>
<li><p><code>IE</code>标准</p>
<ul>
<li>通过<code>attachEvent</code>来绑定事件</li>
<li>语法:<code>dom.attachEvent(type,callback)</code></li>
<li>移除事件:<code>detachEvent(type,callback)</code><ul>
<li>注意: 如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p><code>W3C</code>标准</p>
<ul>
<li>通过<code>addEventListener</code>方法来给<code>dom</code>元素绑定事件</li>
<li>语法:<code>dom.addEventListener(type,callback,useCapture)</code> <code>useCapture 默认值为false</code></li>
<li>移除事件:<code>removeEventListener(type,callback)</code><ul>
<li>注意: 如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>事件流</p>
<ul>
<li>概念:用户在触发某一动作时,页面所做相关的反映的过程</li>
<li>三个阶段:<ul>
<li>事件捕获阶段</li>
<li>处于事件源阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
<li>事件流种类:<ul>
<li>捕获型事件流:事件处理函数是在事件的捕获阶段执行</li>
<li>冒泡型事件流:事件处理函数是在事件的冒泡阶段执行</li>
</ul>
</li>
</ul>
</li>
<li><p><code>attachEvent和 addEventListener</code>区别</p>
<ul>
<li>参数个数不同</li>
<li>事件类型 传值也不同<ul>
<li>IE标准需要加<code>on</code>前缀</li>
<li>W3C不需要加<code>on</code>前缀</li>
</ul>
</li>
<li>在绑定多个事件处理函数时,IE在执行处理函数时,顺序不定(得看版本);而W3C,按照队列结构来依次执行事件的处理函数</li>
<li>在事件处理函数内<code>this</code>指向不同<ul>
<li>IE:window</li>
<li>W3C:返回正在执行事件处理函数的<code>dom</code>元素</li>
</ul>
</li>
</ul>
</li>
<li><p><code>addEvent</code>方法</p>
<ul>
<li>根据浏览器能力,提前返回事件绑定方法</li>
<li>如果浏览器符合W3C标准,使用<code>addEventListener</code>绑定事件</li>
<li>否则就使用<code>attachEvent</code>来绑定事件</li>
</ul>
</li>
<li><p><code>removeEvent</code>方法</p>
<ul>
<li>根据浏览器能力,提前返回事件移除方法</li>
<li>如果浏览器符合W3C标准,使用<code>removeEventListener</code>移除事件处理函数</li>
<li>否则就使用<code>detachEvent</code>来移除事件处理函数</li>
</ul>
</li>
<li><p>on方法</p>
<ul>
<li>功能:给<code>itcast</code>对象上所有<code>dom</code>元素绑定事件</li>
<li>实现思路<ul>
<li>遍历<code>this</code>上所有<code>dom</code>元素</li>
<li>调用<code>addEvent</code>给当前遍历到的<code>dom</code>元素绑定事件</li>
<li>返回<code>this</code>,实现链式编程</li>
</ul>
</li>
</ul>
</li>
<li><p><code>off</code>方法</p>
<ul>
<li>功能:移除<code>itcast</code>对象上所有<code>dom</code>元素的事件处理函数</li>
<li>实现思路<ul>
<li>遍历<code>this</code>上所有<code>dom</code>元素</li>
<li>调用<code>removeEvent</code>给当前遍历到的<code>dom</code>元素移除相应事件的处理函数</li>
<li>返回<code>this</code>,实现链式编程</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="click方法"><a href="#click方法" class="headerlink" title="click方法"></a><code>click</code>方法</h2><ol>
<li>功能: 给itcast对象上的所有dom元素绑定单击 事件处理函数的</li>
<li>语法:<code>itcast对象.click(callback)</code></li>
<li>实现思路<ul>
<li>遍历<code>this</code>上的所有<code>dom</code>元素</li>
<li>调用<code>addEvent</code>分别传值即可</li>
<li><code>return this</code>实现链式编程</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; title=&quot;事件绑定&quot;&gt;&lt;/a&gt;事件绑定&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;DOMO&lt;/code&gt;方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;dom&lt;/code&gt;元素
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="事件绑定" scheme="http://www.mcling.xyz/tags/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part3</title>
    <link href="http://www.mcling.xyz/2016/12/03/js-1.html"/>
    <id>http://www.mcling.xyz/2016/12/03/js-1.html</id>
    <published>2016-12-03T06:49:16.000Z</published>
    <updated>2016-12-22T03:42:18.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a><code>css</code>方法</h3><ol>
<li>实现思路<ul>
<li>如果只传入一个参数<ul>
<li>如果参数类型为对象,表示同时设置多个样式</li>
<li>如果参数类型为字符串,表示获取指定的样式值</li>
</ul>
</li>
<li>如果传入的两个参数,表示设置单个样式值</li>
</ul>
</li>
</ol>
<h3 id="itcast-each方法-遍历数组或伪数组"><a href="#itcast-each方法-遍历数组或伪数组" class="headerlink" title="itcast.each方法: 遍历数组或伪数组"></a><code>itcast.each</code>方法: 遍历数组或伪数组</h3><ol>
<li>功能<ul>
<li>第一个参数,指定遍历的对象</li>
<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>
</ul>
</li>
</ol>
<h2 id="attr方法-setAttribute和getAttribute"><a href="#attr方法-setAttribute和getAttribute" class="headerlink" title="attr方法(setAttribute和getAttribute)"></a><code>attr方法(</code>setAttribute<code>和</code>getAttribute<code>)</code></h2><ol>
<li>功能: 获取(设置)属性节点值</li>
<li>实现思路<ul>
<li>给原型添加<code>attr</code>方法,定义两个参数:属性节点名字<code>name</code>以及属性节点值</li>
<li>如果只传入一个参数</li>
<li>如果参数类型为对象,表示设置多个节点值</li>
<li>否则获取指定的属性节点值(默认获取第一个<code>dom</code>元素的属性节点值)</li>
<li>如果传入两个参数,表示设置单个属性节点值.</li>
</ul>
</li>
</ol>
<h2 id="html方法"><a href="#html方法" class="headerlink" title="html方法"></a><code>html</code>方法</h2><ol>
<li><p>功能:</p>
<ul>
<li>如果不传入参数,此时表示获取指定<code>dom</code>元素的<code>innerHTML</code>属性值</li>
<li>否则,表示设置指定<code>dom</code>元素的<code>innerHTML</code>属性</li>
</ul>
</li>
<li><p>实现思路</p>
<ul>
<li>判断 是否传入参数</li>
<li>如果没传,获取<code>itcast</code>对象上第一个<code>dom</code>元素的<code>innerHTML</code>属性值</li>
<li>否则,给<code>itcast</code>对象上每一个<code>dom</code>元素设置<code>innerHTML</code>属性</li>
</ul>
</li>
</ol>
<h2 id="text方法"><a href="#text方法" class="headerlink" title="text方法"></a><code>text</code>方法</h2><ol>
<li>功能:<ul>
<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>
<li>否则,设置指定dom元素文本节点值</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值,优先考虑浏览器是否支持<code>textContent</code>属性</li>
<li>如果支持,就使用<code>textContent</code>返回结果集中每一个<code>dom</code>元素的文本节点值</li>
<li>否则,就使用<code>innerText</code>返回结果集中每一个<code>dom</code>元素的文本节点值.</li>
<li>如果传值,给<code>itcast</code>对象上的每一个<code>dom</code>元素设置文本节点值</li>
<li>如果支持<code>textContent</code>实行,就使用该属性设置文本</li>
<li>否则,就使用<code>innerText</code>来设置文本</li>
</ul>
</li>
</ol>
<h2 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h2><ol>
<li>功能: <code>value</code>属性<ul>
<li>如果不传值,表示获取输入框的文本值</li>
<li>如果传值,表示给输入框 设置文本</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>
<li>如果传值，表示给输入框 设置文本</li>
<li>遍历每一个输入框，同时给其设置文本</li>
</ul>
</li>
</ol>
<h2 id="prop方法"><a href="#prop方法" class="headerlink" title="prop方法"></a>prop方法</h2><ol>
<li>功能: 和<code>attr</code>相似<ul>
<li>注意:有些属性名称,比如<code>for,class</code>是保留字或关键字不能作为对象属性名称.所以要创建一个对象,转换这类的属性</li>
<li>定义<code>protoFix</code>对象,存储上述属性到新属性名称的映射关系</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;css方法&quot;&gt;&lt;a href=&quot;#css方法&quot; class=&quot;headerlink&quot; title=&quot;css方法&quot;&gt;&lt;/a&gt;&lt;code&gt;css&lt;/code&gt;方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;实现思路&lt;ul&gt;
&lt;li&gt;如果只传入一个参数&lt;ul&gt;
&lt;li&gt;如果参数类型为对
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="css属性模块" scheme="http://www.mcling.xyz/tags/css%E5%B1%9E%E6%80%A7%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part2</title>
    <link href="http://www.mcling.xyz/2016/12/02/js1.html"/>
    <id>http://www.mcling.xyz/2016/12/02/js1.html</id>
    <published>2016-12-02T10:34:53.000Z</published>
    <updated>2016-12-22T03:42:03.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hasClass方法"><a href="#hasClass方法" class="headerlink" title="hasClass方法"></a><code>hasClass</code>方法</h2><ol>
<li>功能: 如果结果集里只要有一个<code>dom</code>元素 具有指定的样式类，就返回<code>true</code></li>
<li><p>实现思路:</p>
<ul>
<li>定义结果变量<code>ret</code>，默认值为<code>false</code></li>
<li>遍历结果集的每一个<code>dom</code>元素如果当前<code>dom</code>元素具有指定的样式类，将<code>ret=true</code>,结束循环</li>
<li><p>返回<code>ret</code>。</p>
</li>
<li><p>如何判断<code>dom</code>元素具有指定的样式类？<br>在<code>dom</code>元素所有样式类的收尾 + 空格；在用户指定的样式类 收尾 + 空格<br>调用<code>indexOf</code>方法，如果返回值 = -1，表示没有；否则就具有指定样式类。</p>
</li>
</ul>
</li>
</ol>
<h2 id="each方法"><a href="#each方法" class="headerlink" title="$.each方法"></a><code>$.each</code>方法</h2><ol>
<li>功能: 实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br>在回调函数中,<code>this</code>指向的是当前边开遍历到的元素</li>
<li>语法:<code>$.each([数组/伪数组],callback);</code></li>
<li>实现思路<ul>
<li>声明<code>each</code>函数,定义两个形参: 第一个遍历的(伪数组);第二个:回调函数</li>
<li>使用<code>for</code>循环,遍历(伪)数组.再循环体背部执行回调函数,在执行时,给回调函数传实参</li>
<li>实现回调函数内部<code>this</code>指向当前遍历到的元素</li>
<li>通过回调函数的返回值,判定是否结束循环.规定:当返回值为<code>false</code>,结束循环</li>
</ul>
</li>
</ol>
<h2 id="itcast中链式编程的实现"><a href="#itcast中链式编程的实现" class="headerlink" title="itcast中链式编程的实现"></a><code>itcast</code>中链式编程的实现</h2><p> 1.返回当前方法的调用者: <code>return this;</code></p>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a><code>get</code>方法</h2><ol>
<li>功能:根据参数<code>index</code>,获取相应<code>dom</code>元素</li>
<li>实现思路<ul>
<li>将字符串类型转换成数字</li>
<li><code>index &lt; 0 ==&gt; index + length</code></li>
<li><code>return this</code></li>
</ul>
</li>
</ol>
<h2 id="eq方法"><a href="#eq方法" class="headerlink" title="eq方法"></a><code>eq</code>方法</h2><ol>
<li>功能: 根据参数index,获取相应dom元素,转换成itcast对象,再返回</li>
</ol>
<h2 id="first方法"><a href="#first方法" class="headerlink" title="first方法"></a>first方法</h2><h2 id="last方法"><a href="#last方法" class="headerlink" title="last方法"></a>last方法</h2><h2 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a>css方法</h2><ol>
<li>功能:<ul>
<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>
<li>设置: a:如果只传一个参数并且类型为对象,设置多个样式值; b:传入两个参数,设置单个样式.<br>2.实现思路</li>
<li>给<code>itcast</code>原型添加<code>css</code>方法,定义两个参数</li>
<li>如果只传入一个参数<ul>
<li>类型为对象的话,同时设置多个样式属性</li>
<li>类型不为对象,获取指定的样式值</li>
</ul>
</li>
<li>如果只传入两个参数,设置单个样式值</li>
</ul>
</li>
</ol>
<h2 id="addClass方法"><a href="#addClass方法" class="headerlink" title="addClass方法"></a><code>addClass</code>方法</h2><ol>
<li>功能: 给结果集中的每一个<code>dom</code>元素添加指定样式类</li>
<li>实现思路<ul>
<li>遍历<code>this上</code>的每一个<code>dom</code>元素</li>
<li>首先判断当前遍历到的<code>dom</code>元素是否含有样式类.如果不具有,就给其添加指定的样式类.</li>
</ul>
</li>
</ol>
<h2 id="removeClass方法"><a href="#removeClass方法" class="headerlink" title="removeClass方法"></a><code>removeClass</code>方法</h2><ol>
<li>功能: 删除结果集中的每一个dom元素的指定样式类</li>
<li>实现思路<ul>
<li>遍历this上的每一个dom元素</li>
<li><code>(&#39; &#39;+ v.className +&#39; &#39;).replace(&#39; &#39; + className +&#39;&#39;,&#39;&#39;)</code></li>
</ul>
</li>
</ol>
<h2 id="toggleClass方法"><a href="#toggleClass方法" class="headerlink" title="toggleClass方法"></a><code>toggleClass</code>方法</h2><ol>
<li>功能: 切换指定的样式类: 如果有,就删除,没有就添加</li>
<li>实现思路:<ul>
<li>遍历<code>this</code>上的每一个<code>dom</code>元素</li>
<li>判断当前遍历到的<code>dom</code>元素是否含有指定的样式类</li>
<li>如果有,就删除</li>
<li>如果没有就添加</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hasClass方法&quot;&gt;&lt;a href=&quot;#hasClass方法&quot; class=&quot;headerlink&quot; title=&quot;hasClass方法&quot;&gt;&lt;/a&gt;&lt;code&gt;hasClass&lt;/code&gt;方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;功能: 如果结果集里只要有一个&lt;cod
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="css样式模块" scheme="http://www.mcling.xyz/tags/css%E6%A0%B7%E5%BC%8F%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>js原生框架part1</title>
    <link href="http://www.mcling.xyz/2016/12/01/js.html"/>
    <id>http://www.mcling.xyz/2016/12/01/js.html</id>
    <published>2016-12-01T11:28:10.000Z</published>
    <updated>2016-12-22T03:41:36.365Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="案例-获取指定DOM下所有子元素"><a href="#案例-获取指定DOM下所有子元素" class="headerlink" title="案例:获取指定DOM下所有子元素"></a>案例:获取指定DOM下所有子元素</h2><ol>
<li>在框架内部，遍历子节点，应该使用firstChild和nextSibling方式。</li>
</ol>
<h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><ol>
<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>
<ul>
<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将他们当做实参传入沙箱中</li>
</ul>
</li>
<li><p>核心函数为itcast，相当于jQuery。最终要暴露给用户使用</p>
</li>
<li><p>实现itcast函数，使用的是工厂模式来创建对象。好处:用户new或不new都可以得到正确的对象</p>
</li>
<li><p>init构造函数的位置</p>
<ul>
<li><p>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更多用户，尽量将构造函数暴露给用户</p>
</li>
<li><p>可以把构造函数放在itcast函数上，也可以放在itcast函数原型上。</p>
</li>
<li><p>处于jQuery之父，在写简单继承模式时，将构造函数放在其原型上，那么在编写框架时，即延续下来了</p>
</li>
</ul>
</li>
<li><p>init创建出来的对象，最终继承自itcast.prototype 所以可以将init对象称为 itcast对象</p>
</li>
<li><p>由于暴露给用户的是 itcast 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员为静态成员 。可以直接通过函数名字来访问。但是，在原型上的成员必须创建实例来访问。因此为了实现init对象可以访问itcast原型上的成员，就基于原型来实现。</p>
</li>
<li><p>完善init构造函数</p>
<ul>
<li>selector类型:<ul>
<li>无效值: null undefined ‘’</li>
<li>字符串<ul>
<li>选择器 : “div” 根据选择器筛选dom元素，并以伪数组形式存储在this上</li>
<li>html字符串 <code>&#39;&lt;p&gt;123&lt;/p&gt;&#39;</code>将html字符串转换成html元素</li>
</ul>
</li>
<li>DOM节点</li>
<li>DOM数组</li>
<li>function: 入口函数 DOMContentLoaded<ul>
<li>使用静态属性isReady 存储dom树是否加载完毕</li>
<li>判断isReady值，如果为true，就直接执行传入的函数</li>
<li>否则，就给document的DOMContentLoaded事件绑定处理程序，在处理程序中，先将isReady赋值为true，在执行</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>如何判断字符串为html字符串</p>
<ul>
<li>以’&lt;’开头</li>
<li>以’&gt;’结尾</li>
<li>最小长度为3</li>
</ul>
</li>
<li><p>如何判断像数组（数组和伪数组）</p>
<ul>
<li>用length属性判断啊，若具有length属性 表示为 像数组类型</li>
<li>除了window对象以及函数对象</li>
<li><p>{length :1}{4:”123”,length:5}稀疏数组</p>
</li>
<li><p>如果为真数组，返回true</p>
</li>
<li>如果length属性值为0，除了window对象以及函数对象，返回true</li>
<li>如果length属性值&gt;0,如果对象具有 length - 1 索引，返回true</li>
</ul>
</li>
<li><p>全局对象 window特性:有一个window属性 引用 自身</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;案例-获取指定DOM下所有子元素&quot;&gt;&lt;a href=&quot;#案例-获取指定DOM下所有子元素&quot; class=&quot;headerlink&quot; title=&quot;案例:获取指定DOM下所有子元素&quot;&gt;&lt;/a&gt;案例:获取指定DOM下所有子元素&lt;/h2
    
    </summary>
    
      <category term="js原生框架" scheme="http://www.mcling.xyz/categories/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="js" scheme="http://www.mcling.xyz/tags/js/"/>
    
      <category term="框架结构" scheme="http://www.mcling.xyz/tags/%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CSS3</title>
    <link href="http://www.mcling.xyz/2016/11/29/CSS3.html"/>
    <id>http://www.mcling.xyz/2016/11/29/CSS3.html</id>
    <published>2016-11-29T01:40:03.000Z</published>
    <updated>2016-12-01T11:36:29.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="文字与字体"><a href="#文字与字体" class="headerlink" title="文字与字体"></a>文字与字体</h2><ol>
<li><p>文字阴影 <code>text-shadow</code></p>
<ul>
<li>语法: <code>text-shadow：pageX+px  pageY+px  Blur+px  color</code></li>
<li>参数介绍:<br>  可以给一个对象应用一组或多组阴影效果，方式如前面的语法显示一样，用逗号隔开。   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">text-shadow: X-Offset Y-Offset Blur Color</div><div class="line">X-Offset: 表示阴影的水平偏移距离,其值为正值时阴影向右偏移,如果其值为负值时,阴影向左偏;</div><div class="line">Y-Offset: 是指阴影的垂直偏移距,如果其值是正值时,阴影向下偏移反之其值是负值时阴影向顶部偏移;</div><div class="line">Blur: 是指阴影的模糊程度,其值不能是负值,如果值越大,阴影越模糊,反之阴影越清晰,如果不需要阴影模糊可以将Blur值设置为0;</div><div class="line">Color:是指阴影的颜色,其可以使用rgba色。</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>隐藏文字: 要实现溢出时产生省略号的效果,还须定义另外两条属性</p>
<ul>
<li><p><code>text-overflow</code>: 只是用来说明文字溢出时用什么方式显示</p>
<ul>
<li>参数:<ul>
<li><code>clip</code>: 超出部分裁切</li>
<li><code>ellipsis</code>: 超出部分用省略号代替</li>
</ul>
</li>
</ul>
</li>
<li><p><code>overflow:hidden</code>: 溢出内容为隐藏</p>
</li>
<li><code>white-space: nowrap</code>: 强制文字在一行显示 </li>
</ul>
</li>
<li>控制连续文本换行<code>word-wrap</code><ul>
<li>参数<ul>
<li><code>normal</code>: 浏览器默认值</li>
<li><code>break-word</code>: 设置在长单词或 <code>URL</code>地址内部进行换行</li>
</ul>
</li>
</ul>
</li>
<li>嵌入式字体 <code>@font-face</code>: 能够加载服务器端的字体文件,让浏览器端可以显示用户电脑里没有安装的字体。<ul>
<li>语法:  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">   font-family : 字体名称;</div><div class="line">   src : 字体文件在服务器上的相对或绝对路径;</div><div class="line">&#125;</div><div class="line"><span class="comment">//这里是定义用的哪种字体和路径，在其他css属性中使用这种字体的就会从这个路径去加载渲染字体</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ol>
<li><p>圆角<code>border-radius</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">border-radius:1参数或4参数,参数为px或百分比。</div><div class="line"></div><div class="line">一参数为四个圆角的弧度;</div><div class="line"></div><div class="line">四参数顺序为:左上,右上,左下,右下</div></pre></td></tr></table></figure>
</li>
<li><p>阴影<code>box-shadow</code></p>
<ul>
<li>参数: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式]  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">前两个参数为必填参数其他为可选参数，投影方式默认为外阴影方式，可以设置为inset内阴影方式。</div><div class="line">      </div><div class="line">阴影颜色默认为黑色</div><div class="line"></div><div class="line">可以添加多个阴影，用逗号隔开。</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>边框图片 <code>border-image</code></p>
<ul>
<li>语法: <code>border-image：url（） n n n n 平铺方式</code><ul>
<li>平铺方式<ul>
<li><code>repeat</code> 重复</li>
<li><code>round</code>  平铺</li>
<li><code>stretch</code> 拉伸</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="颜色相关"><a href="#颜色相关" class="headerlink" title="颜色相关"></a>颜色相关</h2><ol>
<li><p>渐变</p>
<ul>
<li><p>线性渐变:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">background-image:linear-gradient(to bottom,red,orange);</div><div class="line"></div><div class="line">background-image:渐变方式（方向可以是to left等也可以是deg，颜色后面可以跟百分比值）</div></pre></td></tr></table></figure>
</li>
<li><p>径向渐变</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">radial-gradient（渐变的椭圆左右半径 渐变的椭圆的上下半径 at 渐变的椭圆的定位x位置 渐变的椭圆定位y位置，颜色，颜色）</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="背景相关"><a href="#背景相关" class="headerlink" title="背景相关"></a>背景相关</h2><ol>
<li><code>background-origin</code>:定义背景显示区域<ul>
<li>参数:</li>
</ul>
<ol>
<li><code>border-box</code>: 背景从边框开始,也就是压在边框上</li>
<li><code>padding-box</code>:背景从内边距开始(相当于默认值)</li>
<li><code>content-box</code>:背景从内容区开始（比如内边距是20px那就会在盒子内20px的位置开始渲染背景）</li>
</ol>
</li>
<li><code>background-clip</code>: 定义背景裁剪区<ul>
<li>参数:</li>
</ul>
<ol>
<li><code>border-box</code>: 默认值,从边框向外裁剪</li>
<li><code>padding-box</code>: 由内填充,向外裁剪</li>
<li><code>content-box</code>:　从内容区域外裁剪背景</li>
<li><code>no-clip</code>：　不裁剪</li>
</ol>
</li>
<li><code>background-size</code><ul>
<li><code>auto</code></li>
<li>长度值<code>px</code>: 可以设置宽高值,当只有一个值时默认为宽度高度等比缩放</li>
<li>百分比: 将背景图标的宽高变成r容器宽高的百分比</li>
<li><code>cover</code> : 背景缩放到覆盖整个容器</li>
<li><code>contain</code> : 背景缩放到覆盖容器的一边为止</li>
</ul>
</li>
<li><code>multiple backgrounds</code>: 多背景<ul>
<li>概念和用法: 在一个元素内，可以同时写N个url路径来呈现多张背景图, 但是需要用到background-position来将他们定位到不同的位置。还需要background-repeat：no-repeat;其他上述的属性也可以定义  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例代码 .demo&#123;</div><div class="line">  连写background：url("1.jpg") no-repeat top left,</div><div class="line">  url("2.jpg“) no-repeat top bottom;</div><div class="line"> &#125;</div><div class="line">  分开写background-images&#123;</div><div class="line">     url("1.jpg") ,</div><div class="line">     url("2.jpg";)</div><div class="line">   &#125;</div><div class="line"> //下面的省略了，注意看我代码中的标点符号</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol>
<li>属性选择器<ul>
<li><code>E[attr$=val]</code> : 选中的是<code>attr</code>属性的值的结尾是<code>val</code>的<code>E</code>元素</li>
<li><code>E[attr*=val]</code> : 选中的是<code>attr</code>属性的值具有<code>val</code>的E元素</li>
</ul>
</li>
<li><p>结构性伪类选择器</p>
<ul>
<li><code>:root</code> : 选择到的是最高的根节点也就是等同于html。ie9以下不支持。可以当作一种hack方法来使用。 (根选择器)</li>
<li><p><code>:not</code> : 可以选取除某个元素之外的所有元素(否定选择器)</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">//比如</span></div><div class="line">      input：not（[type=<span class="string">"submit"</span>]）&#123;</div><div class="line"><span class="attr">border</span>:<span class="number">1</span>px solid red;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//除了密码表单其他表单的边框色都变成红色</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>:empty</code> : 用来选择没有任何内容的元素(空选择器)</p>
</li>
<li><p><code>:target</code> : 目标选择器</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">写法#id：target 与锚点有关系</div><div class="line">例如一个a标签的 href=“id” 一个div的id=id</div><div class="line">那么#id：target就是当a标签被点击后 那个id是id的div的样式</div></pre></td></tr></table></figure>
</li>
<li><p><code>:first-child</code> : 选择父元素的第一个子元素的元素</p>
</li>
<li><code>:last-child</code> : 元素的最后一个子元素</li>
<li><code>:nth-child(n)</code> : 用来定位父元素的多个特定的子元素,<br><code>n</code>是参数,也可以是<code>n+x</code>等表达式,但参数<code>n</code>的起始值是1,而不是0.也就是说当n为0时匹配不到任何元素。</li>
<li><code>:nth-last-child(n)</code> : 与<code>nth-child()</code>相反是从最后的子元素开始计算，来选择特定的元素</li>
</ul>
</li>
<li>元素类型伪类选择器<ul>
<li><code>:first-of-type</code> : 类似于<code>：first-child</code>只不过<code>:first-of-type</code>是用来定位父元素下的某个【类型】的第一个子元素</li>
<li><code>:last-of-type</code> : 用来定位父元素下的某个[类型]的最后一个子元素</li>
<li><code>:nth-of-type(n)</code> : 计算父元素中指定的某种[类型]的子元素</li>
</ul>
</li>
<li><p>唯一后代伪类选择器</p>
<ul>
<li><code>:only-child</code> : 选择器选中的是父元素只有一个子元素的元素</li>
<li><code>:only-of-type</code> : 表示如果被选中父元素内有多个子元素,选择器就可以选中唯一类型的子元素。  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">        //比如</div><div class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       //用div：only-of-type选择到的就是p元素</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>表单状态选择器</p>
<ul>
<li><code>:enable</code> : 选择到的是可用的表单</li>
<li><code>:disable</code> : 选择到被禁用的表单</li>
<li><code>:checked</code> : 选中的是选中状态的表单</li>
<li><code>:read-only</code> : 该属性是选中只读状态的表单。表单里面有这样一条属性<code>readonly=&quot;readonly&quot;</code>表示该表单只可读</li>
<li><code>:read-write</code> : 与<code>read-only</code>相反，表示选中的是可编辑表单</li>
</ul>
</li>
<li>伪元素选择器<ul>
<li><code>::selection</code> : 选择的是被鼠标选中的文本</li>
<li><code>::after和::before</code> : <code>::before</code>和<code>::after</code>这两个主要用来给元素的前面或后面插入内容，这两个常和<code>&quot;content&quot;</code>配合使用,<br>在使用时通常要灵活的考虑到<code>display</code>属性 、定位 、 <code>z-index</code>;</li>
</ul>
</li>
</ol>
<hr>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li><code>transition</code>复合过渡属性</li>
</ul>
<ol>
<li><code>transition-property</code> : 指定过渡或动态模拟的CSS属性</li>
<li><code>transition-duration</code> : 指完成过渡所需时间</li>
<li><code>transition-timing-function</code> : 指定过渡函数或贝塞尔曲线<ul>
<li><code>linear</code> : 相同速度开始至结束的过渡效果</li>
<li><code>ease</code> : 慢速开始，然后变快，然后慢速结束</li>
<li><code>ease-in</code> : 慢速开始的过渡效果</li>
<li><code>ease-out</code> : 慢速结束的过渡效果</li>
<li><code>ease-in-out</code> : 以慢速开始和结束的过渡效果</li>
<li><code>cubic-bezier(n,n,n,n)</code> : 贝塞尔曲线参数</li>
</ul>
</li>
<li><code>transition-delay</code> : 过渡延迟时间</li>
</ol>
<hr>
<h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><ol>
<li><code>rotate(deg)</code> 旋转 : 通过指定的参数来控制元素旋转正值为顺时针,负值为逆时针</li>
<li><code>skew(x,y)</code> 扭曲 : 可以让元素倾斜显示,可以让元素以中心位置围绕x,y轴按照一定角度倾斜。会改变元素形状。</li>
<li><code>scale(x,y)</code> 缩放 : 让元素根据中心原点对对象进行缩放</li>
<li><code>translate(x,y)</code> 位移 : 就是字面意思，可以让元素横向纵向移动</li>
<li><p><code>matrix()</code> 数学矩阵 :</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">     参数有:scaleX(),skewX(),skewY(),scaleY(),translateX(),translateY()</div><div class="line">     分别为横向伸缩,横向扭曲,纵向扭曲,纵向伸缩,横向位移,纵向位移。默认参数值为1,0,0,1,0,0</div><div class="line">    ``` </div><div class="line">6. `transform-origin` 原点 : 元素的坐标原点默认值为`center`,center或者50%,50% 更改原点</div><div class="line">---</div><div class="line"></div><div class="line">## 布局方式</div><div class="line">1. 盒模型</div><div class="line">    * `box-sizing` : `border-box`</div></pre></td></tr></table></figure>
<pre><code>元素的宽度=内容的宽度(包含border和padding)
也就是说写了宽100px，不管加边框还是内间距盒子的大小都不会变。
这其实是ie的传统盒模型 IE6以下的版本或者IE6-7的怪异模式中就是这样的
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    * `content-box` : W3C标准盒模型</div><div class="line">2. 多列布局  `columns`</div><div class="line">    * 用途 :复合属性可以让元素内容以多少宽度的n列显示`columns: 200px 2;`</div><div class="line">    * `column-count` : 列数 number</div><div class="line">    * `column-width` : 列宽 px</div><div class="line">    * `column-gap` :  列间距 px</div><div class="line">    * `column-rule` : 列边框与盒子边框一样</div><div class="line">    * `column-span` : 跨列 </div><div class="line">        * all 跨所有列</div><div class="line">        * none 默认参数</div><div class="line">        * 例子</div><div class="line">            ```css</div><div class="line">            p:nth-child(2n)&#123;</div><div class="line">              column-span:all;</div><div class="line">              &#125;</div><div class="line">             //偶数列的p都跨列显示。就是和单列显示差不多的意思</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>伸缩布局</p>
<ul>
<li>应用场景:<br>Flexbox布局常用于设计比较复杂的页面，可以轻松的实现屏幕和浏览器窗口大小发生变化时保持元素的相对位置和大小不变，同时减少了依赖于浮动布局实现元素位置的定义以及重置元素的大小。</li>
<li><p>创建 flex 容器  <code>display:flex</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flexbox布局的第一步是需要创建一个flex容器。为此给元素设置display属性的值为flex。在Safari浏览器中，你依然需要添加前缀-webkit</div></pre></td></tr></table></figure>
</li>
<li><p>flex 项目显示  <code>flex-direction</code></p>
<ul>
<li>row 默认值</li>
<li>呈列显示 column</li>
</ul>
</li>
<li>flex 布局<ul>
<li>flex 移动到顶部: 根据主轴方向使用不同的属性如果是呈列显示那么主轴就是水平方向，如果呈行显示那么主轴方向就是垂直<ul>
<li>垂直方向的设置方式: <code>align-items</code> 参数<code>flex-start</code></li>
<li>水平方向的设置方式: <code>justify-content</code>  参数<code>flex-start</code></li>
</ul>
</li>
<li>flex 项目移到左边<ul>
<li><code>flex-direction:column</code>时  <code>align-items:flex-start</code></li>
<li><code>flex-direction:row</code>时   <code>justify-content:flex-start</code> </li>
</ul>
</li>
<li>flex 项目移到右边<ul>
<li><code>flex-direction:column</code>时  <code>align-items:flex-start</code></li>
<li><code>flex-direction:row</code>时   <code>justify-content:flex-end</code> </li>
</ul>
</li>
<li>水平垂直居中 <code>justify-content</code>或者<code>align-items</code>为 <code>center</code></li>
<li>等比伸缩:两个兄弟盒子一个为<code>flex:100</code>一个为<code>flex:200</code>他俩就是以1：2的关系占满父盒子的宽或者高</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Media-Query"><a href="#Media-Query" class="headerlink" title="Media Query"></a>Media Query</h2><p>兼容性ie6-8不支持</p>
<ol>
<li>Media type<ul>
<li>All  所有设备</li>
<li>Screen 电脑显示器</li>
<li>Print  打印预览图</li>
</ul>
</li>
<li><p>Media Query</p>
<ul>
<li><p>link 标签</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;screen&quot; /&gt;</div><div class="line"> 根据不同的设备使用不同的样式链接</div></pre></td></tr></table></figure>
</li>
<li><p>@import</p>
<ul>
<li>在样式中通过<code>@import</code>调用另一个样式文件   <code>@importurl(print.css) print;</code></li>
<li>在<code>&lt;head&gt;</code>中的<code>&lt;style&gt;</code>标签中引入媒体类型方法    <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"> @importurl(style.css) all;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>CSS3 新增的 @media</p>
<ul>
<li><p>在样式文件中引用媒体类型</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen &#123;</div><div class="line">    选择器&#123;<span class="comment">/*你的样式代码写在这里…*/</span>&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@media</code>引入媒体类型的方式是在<code>&lt;head&gt;</code>标签中<code>&lt;style&gt;</code>中引用</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        @<span class="keyword">media</span> screen&#123;</div><div class="line">        选择器&#123;<span class="comment">/*你的样式代码写在这里…*/</span>&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>@media</code>媒体类型<code>and</code>(媒体特性){你的样式}</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@media screen and (max-width:480px)&#123;</div><div class="line">    .ads &#123;</div><div class="line">    display:none;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">//在电脑显示器中并且最大宽度不超过480像素的时候使用此样式</div></pre></td></tr></table></figure>
</li>
<li><p>多个媒体特性使用</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@media screen and (min-width:600px) and (max-width:900px)&#123;</div><div class="line">    body &#123;background-color:#f5f5f5;&#125;</div><div class="line">    &#125;</div><div class="line">// 在电脑显示屏中并且最小不超过600px最大不超过900px的时候使用此样式</div></pre></td></tr></table></figure>
</li>
<li><p>设备屏幕的输出宽度<code>Device Width</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt;</div><div class="line"></div><div class="line">  //根据设备实际的屏幕像素宽度（并非页面噢）来引用样式</div></pre></td></tr></table></figure>
</li>
<li><p>not 关键词</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> not print and (max-width: <span class="number">1200px</span>)&#123;样式代码&#125;</div><div class="line">  样式代码将被使用在除打印设备和设备宽度小于1200<span class="selector-tag">px</span>下所有设备中。</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h1&gt;&lt;h2 id=&quot;文字与字体&quot;&gt;&lt;a href=&quot;#文字与字体&quot; class=&quot;headerlink&quot; title=&quot;文字与字体&quot;&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://www.mcling.xyz/categories/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.mcling.xyz/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>致2016年的自己</title>
    <link href="http://www.mcling.xyz/2016/11/26/xinqing.html"/>
    <id>http://www.mcling.xyz/2016/11/26/xinqing.html</id>
    <published>2016-11-26T12:24:09.000Z</published>
    <updated>2016-11-26T12:36:34.890Z</updated>
    
    <content type="html"><![CDATA[<p>   2016年发生了太多的事,一直以来都觉得自己足够坚强,可是有时候自己又是那么的溃不成军,总喜欢把自己的心情伪装起来,这样的生活真的好累好累,有时候的满不在乎大大咧咧其实是为了掩饰自己内心的悲伤,我不愿意跟任何人谈起,总喜欢自己一个人默默承受,有太多想说的话不知道从何说起,有些事情知道了只会让自己更难受,真想一觉醒来什么都忘记,忘掉今年发生的所有事,遇见的所有人</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   2016年发生了太多的事,一直以来都觉得自己足够坚强,可是有时候自己又是那么的溃不成军,总喜欢把自己的心情伪装起来,这样的生活真的好累好累,有时候的满不在乎大大咧咧其实是为了掩饰自己内心的悲伤,我不愿意跟任何人谈起,总喜欢自己一个人默默承受,有太多想说的话不知道从何说
    
    </summary>
    
      <category term="个人日志" scheme="http://www.mcling.xyz/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象</title>
    <link href="http://www.mcling.xyz/2016/11/26/JavaScript1.html"/>
    <id>http://www.mcling.xyz/2016/11/26/JavaScript1.html</id>
    <published>2016-11-26T08:21:51.000Z</published>
    <updated>2016-12-22T03:46:16.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-面向对象"><a href="#JavaScript-面向对象" class="headerlink" title="JavaScript 面向对象"></a>JavaScript 面向对象</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol>
<li>概念: 是一种编程思想,在实际解决问题时,应该讲同类问题交由某个对象来解决</li>
<li>好处<ul>
<li>代码解耦</li>
<li>易于维护</li>
<li>易于扩展</li>
</ul>
</li>
<li>缺点<ul>
<li>代码复杂度会增加</li>
<li>成本会增加</li>
</ul>
</li>
</ol>
<hr>
<h2 id="创建对象方式"><a href="#创建对象方式" class="headerlink" title="创建对象方式"></a>创建对象方式</h2><ol>
<li><p>工厂模式</p>
<ul>
<li><p>语法</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">p.name =<span class="string">'jerry'</span>;</div><div class="line">p.age = <span class="number">18</span>;</div><div class="line"><span class="comment">// some other prop</span></div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 =createPerson();</div></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
</li>
</ul>
<ol>
<li>在函数中定义对象,并定义对象的各种属性</li>
<li>创建对象时,不需要 <code>new</code> 操作符</li>
<li>在函数的最后返回该对象</li>
</ol>
</li>
<li><p>构造函数</p>
<ul>
<li><p>语法:</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name =<span class="string">'Jerry'</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">18</span>;</div><div class="line">   <span class="comment">// some other prop</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
</li>
</ul>
<ol>
<li>无需再函数内部创建对象</li>
<li>使用 <code>this</code> 给当前实例添加成员</li>
<li>函数无需明确 <code>return</code> </li>
</ol>
</li>
<li><p>原型模式</p>
<ul>
<li><p>语法:</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Person.prototype.name = <span class="string">'jerry'</span>;</div><div class="line">    Person.prototype.age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">var</span> p3 = <span class="keyword">new</span> Person;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
</li>
</ul>
<ol>
<li>函数中不对成员进行定义</li>
<li>利用 <code>prototype</code> 属性对成员进行定义</li>
</ol>
</li>
<li><p>混合模式</p>
<ul>
<li><p>语法</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> p4 = <span class="keyword">new</span> Person(<span class="string">'Jerry'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
</li>
</ul>
<ol>
<li>该模式是指混合搭配使用构造函数方式和原型方式</li>
<li>将所有属性定义在函数中(构造函数方式)</li>
<li>将所有方式定义在原型上</li>
<li>推荐使用这样方式创建对象</li>
</ol>
</li>
</ol>
<hr>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ol>
<li>概念: <ul>
<li>构造函数的<code>prototype</code>属性所引用的对象</li>
<li>当声明一个函数时,就已定义其原型</li>
</ul>
</li>
<li>相关概念<ul>
<li>原型对象 : 通常将原型也成为对象的原型对象</li>
<li>原型属性 : 通常将圆形也成为构造函数的原型属性</li>
</ul>
</li>
<li>特性<ul>
<li>默认所有原型都有<code>construction</code>属性,指向相关的构造函数</li>
<li>也是对象,也有<code>__proto__</code>属性,指向自己的原型对象</li>
</ul>
</li>
<li>获取原型<ul>
<li>对象: <code>obj.__proto__</code><ul>
<li><code>__proto__</code>非标准属性所引用的对象就是当前对象的原型对象</li>
</ul>
</li>
<li>构造函数: <code>[构造函数].prototype</code></li>
</ul>
</li>
<li><code>__proto__</code>兼容: 若浏览器不兼容此属性<ul>
<li>获取当前对象的构造函数  <code>obj.construction</code></li>
<li>通过其构造函数的<code>prototype</code>属性来获取原型对象</li>
</ul>
</li>
</ol>
<hr>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol>
<li>概念: 在 JS 中,继承就是让一个对象有权去访问另一个对象上的所有成员的技术</li>
<li><p>继承方式</p>
<ul>
<li><p>原型式</p>
<ul>
<li>概念 : 借助已有的对象创建新的对象,将子类的原型指向父类</li>
<li><p>例子</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'mike'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.age=<span class="number">12</span>;</div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();</div></pre></td></tr></table></figure>
</li>
<li><p>问题</p>
<ul>
<li>字面量重写原型会中断关系</li>
<li>子类还无法给父类传递参数</li>
</ul>
</li>
</ul>
</li>
<li><p>类式</p>
<ul>
<li>概念: 在子类构造函数的内部调用父类的构造函数</li>
<li><p>例子</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>,<span class="string">'blue'</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Super.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>问题</p>
<ul>
<li>借用构造函数解决原型式继承的问题,但是没有原型,复用无从谈起</li>
</ul>
</li>
</ul>
</li>
<li><p>混合继承</p>
<ul>
<li>概念: 将原型和类式组合在一起实现继承</li>
<li>例子  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = [<span class="string">'mike'</span>,<span class="string">'jack'</span>,<span class="string">'smith'</span>];</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">    Parent.call(<span class="keyword">this</span>,age)<span class="comment">//</span></div><div class="line">&#125;</div><div class="line">Child.prototype=&#123;</div><div class="line">    <span class="attr">run</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'are both'</span> + <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>组合继承</p>
<ul>
<li>概念:<ul>
<li>jQuery 中 extend 方法的功能</li>
<li>将父类中所有的成员,依次添加到子类中</li>
</ul>
</li>
<li>例子: 参照 JQuery 中 extend 源码</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ol>
<li>定义<ul>
<li>所有对象都有原型对象,即<code>__proto__</code>所引用的对象</li>
<li>所有对象最终都继承自<code>Object.prototype</code></li>
<li><code>Object.prototype</code>的原型对象是<code>null</code></li>
</ul>
</li>
<li>属性查找<ul>
<li>首先在当前对象本身上查找,如果找到就直接返回(调用),并停止查找</li>
<li>如果没找到,就向其原型对象上查找,知道<code>Object.prototype</code></li>
<li>如果找到,就直接返回(调用)</li>
<li>否则就返回<code>undefined</code>(报错)</li>
</ul>
</li>
</ol>
<hr>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><ol>
<li>概念<ul>
<li>词法作用域规定变量的作用是在定义时,而不是在执行时决定</li>
<li>没有块级作用域</li>
<li>只有函数可以限定作用域</li>
</ul>
</li>
<li>全局变量<ul>
<li>不在任何函数内定义的变量</li>
<li>在任何位置都可以被访问到</li>
</ul>
</li>
<li>局部变量<ul>
<li>在函数内部定义的变量(包括参数声明)</li>
<li>只有在函数内部可以被访问到</li>
</ul>
</li>
</ol>
<hr>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ol>
<li>定义<ul>
<li>规定全局作用域为0级链,包含在全局上定义的变量、函数、对象等</li>
<li>如果遇到函数,就在当期链上引申出一条新链,级别当前链级别+1,以此类推</li>
</ul>
</li>
<li>变量查找<ul>
<li>首先在当前链上查找,如果找到就返回,并停止查找</li>
<li>否则就向上一级别链上查找,直到0级链.如果找到就会返回</li>
<li>否则返回<code>undefined</code></li>
</ul>
</li>
</ol>
<hr>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ol>
<li>定义: 指有权访问函数内部变量的函数</li>
<li>作用: 缓存数据</li>
<li>应用<ul>
<li>私有变量</li>
<li>沙箱模式</li>
<li>提升递归效率</li>
<li>柯里化</li>
<li>高阶函数</li>
<li>无法传参<ul>
<li>某些情况下,是无法为要执行的函数提供参数,只能在函数执行之前,提前提供参数</li>
<li>例如</li>
</ul>
<ol>
<li><code>setTimeout</code></li>
<li><code>setInterval</code></li>
<li><code>Ajax callbacks</code></li>
<li><code>event handle</code>  <code>[el.onclick=func、el.attachEvent(&quot;onclick&quot;,func)]</code></li>
</ol>
</li>
<li>案例  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//无法传参的情况</span></div><div class="line"><span class="keyword">var</span> parm=<span class="number">222</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">111</span>)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>)</span>&#123;alert(obj)&#125;</div><div class="line">setTimeout(f1,<span class="number">500</span>);<span class="comment">//正确,无参数</span></div><div class="line"><span class="keyword">var</span> test1=f2(parm);<span class="comment">//执行一次f2函数</span></div><div class="line">setTimeout(f2,<span class="number">500</span>);<span class="comment">//undefined，传参失败</span></div><div class="line">setTimeout(f2(parm),<span class="number">500</span>);<span class="comment">//参数无效，传参失败</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">parm</span>)</span>&#123;alert(parm)&#125;,<span class="number">500</span>);<span class="comment">//undefined，传参失败</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>).onclick=f1;<span class="comment">//正确</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>).attachEvent(<span class="string">"onclick"</span>,f1);<span class="comment">//正确 </span></div><div class="line"></div><div class="line"><span class="comment">//正确做法，使用闭包</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">obj</span>)</span>&#123;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(obj)&#125;&#125;</div><div class="line"><span class="keyword">var</span> test2=f3(parm);<span class="comment">//返回f3的内部函数的引用</span></div><div class="line">setTimeout(test2,<span class="number">500</span>);<span class="comment">//正确,222</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>).onclick=test2;<span class="comment">//正确,222</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>).attachEvent(<span class="string">"onclick"</span>,test2);<span class="comment">//正确,222</span></div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-面向对象&quot;&gt;&lt;a href=&quot;#JavaScript-面向对象&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 面向对象&quot;&gt;&lt;/a&gt;JavaScript 面向对象&lt;/h1&gt;&lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.mcling.xyz/categories/JavaScript/"/>
    
    
      <category term="面向对象" scheme="http://www.mcling.xyz/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ajax</title>
    <link href="http://www.mcling.xyz/2016/11/25/ajax.html"/>
    <id>http://www.mcling.xyz/2016/11/25/ajax.html</id>
    <published>2016-11-25T09:54:44.000Z</published>
    <updated>2016-11-26T03:07:34.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Ajax"><a href="#JavaScript-Ajax" class="headerlink" title="JavaScript Ajax"></a>JavaScript Ajax</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>全称: <code>Asynchronous JavaScript and XML</code> (异步的<code>JavaScript</code>与<code>XML</code>)</li>
<li>定义: 一种请求数据的方式,不需要刷新整个页面</li>
</ol>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>不刷新页面</li>
<li>服务器仅返回需要的数据</li>
</ol>
<h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><ol>
<li><code>XMLHttpRequest</code><ul>
<li>此函数对象是浏览器中的内置对象,在目前的所有浏览器中都支持此对象</li>
<li>IE7+、Firefox、Chrome、Safari以及Opera</li>
</ul>
</li>
<li><code>ActiveXObject</code><ul>
<li>仅IE支持此对象</li>
</ul>
</li>
</ol>
<h2 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h2><ol>
<li>创建<code>XMLHttpRequest</code>对象</li>
<li>连接服务器</li>
<li>发送请求</li>
<li>接收响应数据</li>
</ol>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol>
<li>!IE： <code>var xhr = new XMLHttpRequest();</code></li>
<li>IE: <code>var xhr = new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;);</code> </li>
</ol>
<h2 id="连接-发送"><a href="#连接-发送" class="headerlink" title="连接/发送"></a>连接/发送</h2><ol>
<li><code>open()</code><ul>
<li>功能: 启动服务器连接请求</li>
<li>参数</li>
</ul>
<ol>
<li>请求方式<ul>
<li><code>GET</code></li>
</ul>
<ol>
<li>定义:请求方式是通过URL参数将数据提交到服务器的</li>
<li>特性:<ol>
<li>在URL中传输数据,安全性弱</li>
<li>容量小,一般URL的长度最大为4K到10K,长度是有限制的</li>
<li>有缓存</li>
</ol>
</li>
</ol>
<ul>
<li><code>POST</code></li>
</ul>
<ol>
<li>定义:是通过将数据作为send的参数提交到服务器,’在发送之前,要设置表单提交的内容类型’</li>
<li>特性:<ol>
<li>不在<code>URL</code>中传输数据,相对安全性强</li>
<li>容量大,容量可达到2G,再大就可以使用控件,真正的安全就只有<code>https</code>协议.</li>
<li>无缓存</li>
</ol>
</li>
</ol>
<ul>
<li><code>GET</code>和<code>POST</code>请求的区别</li>
</ul>
<ol>
<li><code>GET</code>更简单也更快,并且在大部分情况下都能用</li>
<li><code>POST</code>请求<ul>
<li>无法使用缓存文件(更新服务器上的文件或数据库)</li>
<li>向服务器发送大量数据(<code>POST</code>没有数据量限制)</li>
<li>发送包含未知字符的用户输入时,<code>POST</code>比<code>GET</code>更稳定也更可靠</li>
</ul>
</li>
</ol>
</li>
<li>请求地址<ul>
<li><code>URL</code></li>
</ul>
</li>
<li>是否异步<ul>
<li><code>true</code> 是 (默认为<code>true</code>)</li>
<li><code>false</code> 否</li>
</ul>
</li>
</ol>
</li>
<li><code>send()</code><ul>
<li>功能: 发送服务器连接请求</li>
<li>参数: (可选)<code>stringObj</code>,当发送<code>POST</code>请求时,传入值</li>
</ul>
</li>
<li><code>setRequestHeader(header,value)</code>: 添加<code>HTTP</code>头信息</li>
</ol>
<h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><ol>
<li>接收到响应后,响应的数据会自动填充<code>XHR</code>对象</li>
<li>相关属性<ul>
<li><code>responseText</code>: 如果来自服务器的响应并非<code>XML</code>,就使用<code>responseText</code>属性,该属性返回字符串形式的响应,因此可以直接使用</li>
<li><code>responseXML</code>: 如果来自服务器的响应是<code>XML(&#39;text/xml&#39;或&#39;application/xml&#39;)</code>,而且需要作为<code>XML</code>对象进行解析,就使用<code>responseXML</code>属性.</li>
</ul>
</li>
</ol>
<h2 id="请求状态"><a href="#请求状态" class="headerlink" title="请求状态"></a>请求状态</h2><ol>
<li><code>XMLHttpRequest</code>对象的<code>readyState</code>属性返回请求的当前状态.当请求被发送到服务器时,我们需要执行一些基于响应的任务,每当<code>readyState</code>改变时,就会触发onreadystatechange事件,readyState属性存有XMLHttpRequest的状态信息</li>
<li><code>XMLHttpRequest</code>属性:<ul>
<li><code>onreadystatechange</code>: 存储函数(或函数名),每当<code>readyState</code>属性改变时,就会调用该函数</li>
<li><code>readyState</code>: 存有<code>XMLHttpRequest</code>的状态.从0到4发生变化<ul>
<li>0 : 请求未初始化,未调用<code>open()</code>方法</li>
<li>1 : 服务器连接已建立.已调用<code>open()</code>方法,正在发送请求</li>
<li>2 : 请求已接收,载入完成.<code>open()</code>方法完成,已收到全部响应内容</li>
<li>3 : 请求处理中,也叫解析.正在解析响应内容</li>
<li>4 : 请求已完成,且响应已就绪.响应内容解析完成,可以在客户端调用了</li>
</ul>
</li>
<li><code>status</code>: 请求结果,也就是<code>HTTP</code>状态码.</li>
</ul>
<ol>
<li>200:OK. </li>
<li>404:未找到页面    </li>
<li>状态码以2开头的都是成功,304表示从缓存中获取</li>
</ol>
</li>
</ol>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><code>JSONP</code></h2><ol>
<li>定义: <code>JSON with Padding</code> 一种跨域请求方式</li>
<li>原理: 利用了<code>script</code>标签可以跨域请求的特点,由其src属性发送请求到服务器,服务器返回js代码,网页端接受响应,然后就直接执行了.这和通过script标签引用外部文件的原理是一样的</li>
<li>组成: <ul>
<li>回调函数 :回调函数一般是由网页端控制,作为参数发往服务器端</li>
<li>数据: 服务器端把该函数和数据拼成字符串返回</li>
</ul>
</li>
<li>实例: 网页端创建一个<code>script</code>标签,并给其<code>src</code>赋值为<code>http://www.xxx.com/?callback=process</code>,此时网页端就发起了一个请求.服务器端将要返回的数据拼好作为函数的参数传入,服务端返回的数据格式类似<code>process({&#39;name&#39;:&#39;jerry&#39;})</code>,网页端接收到了响应值,因为请求者是<code>script</code>,所以相当于直接调用process方法,并且传入了一个参数</li>
<li>特性:<ul>
<li>由于<code>script</code>标签的<code>src</code>属性只在第一次设置的时候起作用,导致<code>script</code>标签没法重用,所以每次完成操作之后要移除</li>
<li><code>JSONP</code>这种请求方式中,参数依旧需要编码</li>
<li>如果不设置超时,就无法得知此次请求是成功还是失败</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-Ajax&quot;&gt;&lt;a href=&quot;#JavaScript-Ajax&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Ajax&quot;&gt;&lt;/a&gt;JavaScript Ajax&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.mcling.xyz/categories/JavaScript/"/>
    
    
      <category term="ajax" scheme="http://www.mcling.xyz/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础part1</title>
    <link href="http://www.mcling.xyz/2016/11/22/css1.html"/>
    <id>http://www.mcling.xyz/2016/11/22/css1.html</id>
    <published>2016-11-22T07:29:58.000Z</published>
    <updated>2016-11-30T11:33:37.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识CSS"><a href="#认识CSS" class="headerlink" title="认识CSS"></a>认识CSS</h2><ul>
<li>作用:美化网页(设置网页样式)</li>
<li>概念:层叠样式表(级联样式表)Cascading  Style  Sheets</li>
<li>层叠:css的特性</li>
</ul>
<h2 id="CSS与html之间的关系"><a href="#CSS与html之间的关系" class="headerlink" title="CSS与html之间的关系"></a>CSS与html之间的关系</h2><ul>
<li>CSS以html为基础存在</li>
<li>CSS控制html标签中的样式(文字大小,文字颜色,网页布局)</li>
</ul>
<h2 id="CSS书写位置"><a href="#CSS书写位置" class="headerlink" title="CSS书写位置"></a>CSS书写位置</h2><ul>
<li>内嵌式写法</li>
<li>外联式写法</li>
<li>行内样式写法</li>
</ul>
<h3 id="内嵌式写法"><a href="#内嵌式写法" class="headerlink" title="内嵌式写法"></a>内嵌式写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span><span class="undefined"></span></div><div class="line">     CSS代码</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS语法结构"><a href="#CSS语法结构" class="headerlink" title="CSS语法结构"></a>CSS语法结构</h2><ul>
<li><code>选择器{属性:值;属性:值;....}</code></li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>定义:选择谁的过程(标签)</li>
<li><p>分类</p>
<ul>
<li><p>简单选择器</p>
<ul>
<li><p>标签选择器<br>  <code>标签名(选择器){属性:值;}</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">	<span class="attribute">color</span>: red;<span class="comment">/*设置文字颜色*/</span></div><div class="line">	<span class="attribute">font-size</span>: <span class="number">30px</span>;<span class="comment">/*设置文字大小*/</span></div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/*设置文字宽度*/</span></div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;<span class="comment">/*设置背景颜色*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>类选择器<br>  <code>.自定义名称{属性:值;...}</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.p-color &#123;color: red;&#125;</div><div class="line"> /* 类样式(类选择器)调用: */</div><div class="line"> &lt;p  class=”p-color”&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>特点:</p>
<ol>
<li>一个类样式可以被多个标签同时调用(公用)</li>
<li>一个标签可以同时调用多个类样式(相当与人的名字)<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class='p-color p-size'&gt;文字&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>类命名规范:</p>
<ol>
<li>通用的类名<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">头：header   </div><div class="line">内容：content/container</div><div class="line">尾：footer </div><div class="line">导航：nav  </div><div class="line">侧栏：sidebar</div><div class="line">栏目：column</div><div class="line">页面外围控制整体布局宽度：wrapper</div><div class="line">左右中：left right center</div><div class="line">登录条：loginbar</div><div class="line">标志：logo</div><div class="line">广告：banner    </div><div class="line">页面主体：main</div><div class="line">热点：hot</div><div class="line">新闻：news</div><div class="line">下载：download</div><div class="line">子导航：subnav</div><div class="line">菜单：menu</div><div class="line">子菜单：submenu</div><div class="line">搜索：search</div><div class="line">友情链接：friendlink</div><div class="line">页脚：footer</div><div class="line">版权：copyright</div><div class="line">滚动：scroll</div><div class="line">内容：content</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ol>
<li>不能以数字开头或者以纯数字定义类名。</li>
<li><p>不推荐使用汉字定义类名</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.文字颜色&#123;</div><div class="line">	<span class="attribute">color</span>:green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不能以特殊字符开头或者纯特殊字符定义 类名(‘_’);</p>
</li>
</ol>
</li>
<li><p>ID选择器(配合js使用)<br>  <code>自定义名称{属性:值;}</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/* ID选择器通过ID属性调用 */</div><div class="line">/* 样式定义 */</div><div class="line">&lt;style&gt;</div><div class="line"> #one&#123;</div><div class="line">	color: red;</div><div class="line"> &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p id=&quot;one&quot;&gt;文字&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>  *ID选择器与类选择器的区别:</p>
<pre><code>1. ID样式只能让一个标签调用
2. 一个标签只能调用一个ID样式
</code></pre></li>
<li>通配符选择器<br>  <code>*{属性: 值;}</code><ul>
<li>特点:将页面中所有的标签都选中设置样式</li>
</ul>
</li>
</ul>
</li>
<li>复合选择器<ul>
<li>标签指定式选择器<br>  <code>标签名.类名 {属性: 值;}</code><ul>
<li>关系：  既。。。。又。。。</li>
</ul>
</li>
<li>后代选择器<br>  <code>选择器 选择器{属性:值;}</code><ul>
<li>注意:<ol>
<li>后代选择器中，标签之间的关系必须是嵌套关系</li>
<li>选择器与选择器之间必须用空格隔开！</li>
</ol>
</li>
</ul>
</li>
<li>并集选择器<br>  <code>选择器,选择器 {属性: 值;}</code><ul>
<li>注意:<ol>
<li>并集选择器之间使用逗号隔开</li>
<li>并集选择器之间可以是嵌套关系也可以是并列关系</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">width:100px</td>
<td style="text-align:center">设置宽度</td>
</tr>
<tr>
<td style="text-align:center">height:100px</td>
<td style="text-align:center">设置高度</td>
</tr>
<tr>
<td style="text-align:center">font-size:20px</td>
<td style="text-align:center">设置文字大小</td>
</tr>
<tr>
<td style="text-align:center">color:red</td>
<td style="text-align:center">前景色(文字颜色)</td>
</tr>
<tr>
<td style="text-align:center">background-color</td>
<td style="text-align:center">背景颜色</td>
</tr>
</tbody>
</table>
<h2 id="单位介绍"><a href="#单位介绍" class="headerlink" title="单位介绍"></a>单位介绍</h2><ul>
<li>px:像素 1px</li>
<li>em:当前文字大小 1em(一个文字的大小)</li>
</ul>
<h2 id="颜色表示方式"><a href="#颜色表示方式" class="headerlink" title="颜色表示方式"></a>颜色表示方式</h2><ul>
<li>直接设置颜色对应的单词 red,blue</li>
<li>十六进制表示法: #00-FF</li>
<li>rgb表示法: R:red; 0-255 G:green; 0-255 B:blue; 0-255</li>
<li>rgba() 半透明的效果 A:alpha 通道 0-1</li>
<li>通过opacity设置半透明效果 Opacity取值0-1</li>
</ul>
<h2 id="Font字体属性"><a href="#Font字体属性" class="headerlink" title="Font字体属性"></a>Font字体属性</h2><ul>
<li>font-size:设置文字大小.</li>
<li>font-weight:设置文字是否加粗显示<ul>
<li>默认值： normal 100-900;   400=noraml     700=bold;</li>
</ul>
</li>
<li>font-style: normal;   文字正常显示<ul>
<li>Italic     文字斜体显示</li>
</ul>
</li>
<li>font-family:  设置文字字体<ul>
<li>直接设置字体名称<br>  <code>font-family:楷体;</code></li>
<li>设置字体对应的单词</li>
<li>使用unicode编码设置字体</li>
<li>line-height:   文字行高</li>
<li>注意:font-family一次可以设置多个字体，字体之间使用逗号</li>
</ul>
</li>
<li>Font属性联写：<br>  <code>font: font-style  font-weight    font-size/line-height  font-family</code><ul>
<li>注意:<ol>
<li>font属性联写中，必须有font-size 和font-family两个值</li>
<li>font属性联写中，font-size 必须在font-family前</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="其他属性补充"><a href="#其他属性补充" class="headerlink" title="其他属性补充"></a>其他属性补充</h2><ul>
<li>text-align： left | center | right  该属性也可以让图片居中</li>
<li>首行缩进 text-indent</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;认识CSS&quot;&gt;&lt;a href=&quot;#认识CSS&quot; class=&quot;headerlink&quot; title=&quot;认识CSS&quot;&gt;&lt;/a&gt;认识CSS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用:美化网页(设置网页样式)&lt;/li&gt;
&lt;li&gt;概念:层叠样式表(级联样式表)Cascading  S
    
    </summary>
    
      <category term="CSS" scheme="http://www.mcling.xyz/categories/CSS/"/>
    
    
      <category term="CSS基础" scheme="http://www.mcling.xyz/tags/CSS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 变量</title>
    <link href="http://www.mcling.xyz/2016/11/20/JavaScript2.html"/>
    <id>http://www.mcling.xyz/2016/11/20/JavaScript2.html</id>
    <published>2016-11-20T02:45:10.000Z</published>
    <updated>2016-12-22T03:51:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ol>
<li>方法<ul>
<li>匈牙利命名法 <code>变量名 = 类型 + 描述</code><ul>
<li>int 类型  i</li>
<li>float 类型  fl</li>
<li>boolean 类型 b</li>
<li>string 类型 s</li>
<li>array 类型 a</li>
<li>object 类型 o</li>
<li>function 类型 fn</li>
<li>RegExp 类型 re</li>
</ul>
</li>
<li>驼峰命名法<ul>
<li>全部大写 (单词与单词之间用下划线分割)</li>
<li>大小写混合 (第一个单词首字母小写,其他首字母大写)</li>
</ul>
</li>
</ul>
</li>
<li>规则<ul>
<li>首字符(英文字母或下划线)</li>
<li>组成(英文字母、数字、下划线)</li>
<li>禁忌( JavaScript 关键字、保留字)</li>
</ul>
</li>
</ol>
<hr>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol>
<li>显示声明<ul>
<li>var 变量名</li>
</ul>
</li>
<li>陋习<ul>
<li>没有类型</li>
<li>重复声明</li>
<li>隐式声明</li>
<li>不声明直接复制</li>
</ul>
</li>
<li>正解<ul>
<li>先声明,后续写</li>
<li>先赋值,后运算</li>
</ul>
</li>
</ol>
<hr>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ol>
<li>值类型<ul>
<li>占用空间固定,保存在栈中</li>
<li>保存与复制的是值本身</li>
<li>可使用<code>typeof</code>获取数据的类型</li>
<li>基本数据类型都是值类型</li>
</ul>
</li>
<li>引用类型<ul>
<li>占用空间不固定,保存在堆中</li>
<li>保存与复制的是指向对象的指针</li>
<li>使用<code>instanceof</code>检测数据的类型</li>
<li>使用<code>new</code>操作实例化的对象,内置对象以及对象字面量方法创建的对象都是引用类型</li>
</ul>
</li>
</ol>
<hr>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol>
<li>全局变量<ul>
<li>包含<ul>
<li>在函数外部定义的变量</li>
<li>在函数内部定义的无<code>var</code>声明的变量</li>
</ul>
</li>
<li>调用<ul>
<li>任何位置</li>
</ul>
</li>
</ul>
</li>
<li>局部变量<ul>
<li>包含<ul>
<li>在函数体内部使用<code>var</code>声明的变量</li>
<li>函数的参数变量</li>
</ul>
</li>
<li>调用<ul>
<li>当前函数体内部</li>
</ul>
</li>
</ul>
</li>
<li>优先级<ul>
<li>局部变量高于同名全局变量</li>
<li>参数变量高于同名全局变量</li>
<li>局部变量高于同名参数变量</li>
</ul>
</li>
<li>特性<ul>
<li>无块级作用域(ES6中let、const)</li>
<li>全局变量是全局对象的属性</li>
<li>局部变量是调用对象的属性</li>
<li>作用域链<ul>
<li>内层函数可访问外层函数的局部变量</li>
<li>外层函数无法访问内层函数的局部变量</li>
</ul>
</li>
<li>声明周期<ul>
<li>全局变量 (除非被显式删除,否则一直存在)</li>
<li>局部变量 (紫声明起至函数执行完毕或被显式删除)</li>
<li>回收机制<ol>
<li>标记计数法</li>
<li>引用计数法</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-变量&quot;&gt;&lt;a href=&quot;#JavaScript-变量&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 变量&quot;&gt;&lt;/a&gt;JavaScript 变量&lt;/h1&gt;&lt;h2 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; cla
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.mcling.xyz/categories/JavaScript/"/>
    
    
      <category term="变量" scheme="http://www.mcling.xyz/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>写给故作坚强的我们</title>
    <link href="http://www.mcling.xyz/2016/11/16/own.html"/>
    <id>http://www.mcling.xyz/2016/11/16/own.html</id>
    <published>2016-11-16T10:48:48.000Z</published>
    <updated>2016-11-20T12:47:41.029Z</updated>
    
    <content type="html"><![CDATA[<p> 　　我们害怕受伤，却常常失望，我们讨厌伪装，却必须这样，笑脸下的心酸不得不自己扛，忍下所有的疲惫，藏起所有的悲伤，只因为，谁也不想露出最脆弱的模样。想哭的时候，找不到可以依靠的肩膀，想逃的时候，没办法狠心彻底的淡忘，伤痕累累，才能抵挡下一次的风霜，安静沉默，才能遮掩心底处的哀伤。<br> 　　有些事，不是不想做，而是没有力量，有些人，不是不想忘，而是习惯埋葬，说的多了，无心惹出事端，做的久了，只会让心空荡，坚强，就像燃烧中的蜡烛，发着温暖的光，留下冰冷的凉。<br> 　　我们其实没那么能扛，只不过撑不住的时候，咬紧了牙齿，我们其实没那么开朗，只不过受过了伤以后，闭紧了心房，我们总会有脆弱的瞬间，在没有人的地方皱眉垂泪，在黑暗的房间中自己疗伤。<br> 　　孤单没人陪，学会了适应，寂寞没人懂，做到了安静，多想有人能看穿假装的坚强，多想有人能抚慰心底的创伤，多想有个人不离不弃在身旁，多想有一次真实面对不伪装。可是，我们终究被经历磨平了热情，被伤害催走了善良。<br> 　　藏起悲伤，才能爱上阳光，收起脆弱，才能迎来坚强，活一天，过一天，熬一天，算一天，一直故作坚强的我们，不容易，一直假装快乐的我们，最要强！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 　　我们害怕受伤，却常常失望，我们讨厌伪装，却必须这样，笑脸下的心酸不得不自己扛，忍下所有的疲惫，藏起所有的悲伤，只因为，谁也不想露出最脆弱的模样。想哭的时候，找不到可以依靠的肩膀，想逃的时候，没办法狠心彻底的淡忘，伤痕累累，才能抵挡下一次的风霜，安静沉默，才能遮掩心底处
    
    </summary>
    
      <category term="个人日志" scheme="http://www.mcling.xyz/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="坚强" scheme="http://www.mcling.xyz/tags/%E5%9D%9A%E5%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>canvas基础</title>
    <link href="http://www.mcling.xyz/2016/11/15/canvas.html"/>
    <id>http://www.mcling.xyz/2016/11/15/canvas.html</id>
    <published>2016-11-15T10:57:25.000Z</published>
    <updated>2016-11-30T11:35:45.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Canvas基础"><a href="#Canvas基础" class="headerlink" title="Canvas基础"></a><code>Canvas</code>基础</h1><h2 id="Canvas是什么？"><a href="#Canvas是什么？" class="headerlink" title="Canvas是什么？"></a><code>Canvas</code>是什么？</h2><p><code>Canvas</code>是<code>HTML5</code>中提供的标签，是一个画布。</p>
<p>默认的宽高为：300 * 150</p>
<h2 id="Canvas的用法"><a href="#Canvas的用法" class="headerlink" title="Canvas的用法"></a>Canvas的用法</h2><ol>
<li>创建一个<code>Canvas</code>标签</li>
<li>获取到该<code>DOM</code>对象</li>
<li><code>Canvas</code>只是一个画布，不能自己画画，需要画图工具</li>
<li>每个<code>Canvas</code>对应一个画图工具，通过 <code>canvas对象.getContext(&quot;2d&quot;)</code>获取到一个  <code>CanvasRenderingContext2D</code>类型的对象</li>
</ol>
<h2 id="如何画直线"><a href="#如何画直线" class="headerlink" title="如何画直线"></a>如何画直线</h2><ol>
<li>先确定在何处下笔，画图工具<code>.moveTo(x, y)</code></li>
<li>确定从开始的点画到哪里去，  画图工具<code>.lineTo(x, y)</code></li>
<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具<code>.stroke()</code>;</li>
</ol>
<h2 id="lineTo的特性"><a href="#lineTo的特性" class="headerlink" title="lineTo的特性"></a><code>lineTo</code>的特性</h2><p>每次<code>lineTo</code>之后都会记录最后的<code>lineTo</code>的点，下次<code>lineTo</code>的时候就接着这个点继续画</p>
<h2 id="closePath"><a href="#closePath" class="headerlink" title="closePath"></a><code>closePath</code></h2><p>将最后一次<code>lineTo</code>的点 和最后一次<code>moveTo</code>的点连起来的</p>
<p>两条线的交界处，如果使用的是<code>closePath</code> 会补全缺口</p>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a><code>fill</code></h2><p>可以将闭合的图形进行填充</p>
<h2 id="非零填充原则"><a href="#非零填充原则" class="headerlink" title="非零填充原则"></a><code>非零填充原则</code></h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>
<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>
<h2 id="如何绘制曲线？"><a href="#如何绘制曲线？" class="headerlink" title="如何绘制曲线？"></a><code>如何绘制曲线？</code></h2><p>使用for循环给每一个x对应一个y值，x和y的关系需要是个多次幂的方程</p>
<h2 id="路径概念"><a href="#路径概念" class="headerlink" title="路径概念"></a><code>路径概念</code></h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>
<p>如果想要改变状态，就需要开启新的路径</p>
<h2 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath"></a><code>beginPath</code></h2><p>可以用来开启新的路径</p>
<h2 id="线型相关属性"><a href="#线型相关属性" class="headerlink" title="线型相关属性"></a><code>线型相关属性</code></h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>lineWidth</td>
<td>画线的时候的线的宽度</td>
</tr>
<tr>
<td>setLineDash()</td>
<td>设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>
</tr>
<tr>
<td>getLineDash()</td>
<td>获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>
</tr>
<tr>
<td>lineDashOffset</td>
<td>设置虚线的偏移量，正值往左，负值往右</td>
</tr>
<tr>
<td>strokeStyle</td>
<td>设置描边的，画线的颜色，颜色值可以为css中任意一种</td>
</tr>
<tr>
<td>fillStyle</td>
<td>设置填充颜色，颜色值可以为css中任意一种</td>
</tr>
</tbody>
</table>
<h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a><code>渐变色</code></h2><p>将线划分为256份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Canvas基础&quot;&gt;&lt;a href=&quot;#Canvas基础&quot; class=&quot;headerlink&quot; title=&quot;Canvas基础&quot;&gt;&lt;/a&gt;&lt;code&gt;Canvas&lt;/code&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;Canvas是什么？&quot;&gt;&lt;a href=&quot;#Canvas
    
    </summary>
    
      <category term="HTML" scheme="http://www.mcling.xyz/categories/HTML/"/>
    
    
      <category term="canvas" scheme="http://www.mcling.xyz/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>遗忘</title>
    <link href="http://www.mcling.xyz/2016/11/14/first1.html"/>
    <id>http://www.mcling.xyz/2016/11/14/first1.html</id>
    <published>2016-11-14T13:38:21.000Z</published>
    <updated>2016-11-26T10:49:33.879Z</updated>
    
    <content type="html"><![CDATA[<p>遗忘，是我们不可更改的宿命，所有的一切都像是没有对齐的图纸，从前的一切回不到过去，就这样慢慢延伸，一点一点的错开，也许，错开了的东西，我们真的应该遗忘了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遗忘，是我们不可更改的宿命，所有的一切都像是没有对齐的图纸，从前的一切回不到过去，就这样慢慢延伸，一点一点的错开，也许，错开了的东西，我们真的应该遗忘了。&lt;/p&gt;

    
    </summary>
    
      <category term="个人日志" scheme="http://www.mcling.xyz/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="遗忘" scheme="http://www.mcling.xyz/tags/%E9%81%97%E5%BF%98/"/>
    
  </entry>
  
</feed>
